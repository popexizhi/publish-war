<map version="0.9.0">
<!-- To view this file, download free mind mapping software FreeMind from http://freemind.sourceforge.net -->
<node CREATED="1335920564546" ID="ID_304229939" LINK="../map%20for%20python-dirive%20into%20python.mm" MODIFIED="1347499024718" TEXT="Chapter 9. XML Processing">
<node CREATED="1335921048000" FOLDED="true" MODIFIED="1338254721718" POSITION="right" TEXT="9.1 Diving in">
<node CREATED="1335921561968" MODIFIED="1335922467953">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P120
    </p>
    <p>
      These next two chapters are about XML processing in Python. It would be helpful if you already knew what an XML document looks like, that it's made up of structured tags to&#160;form a hierarchy of elements, and so on. If this doesn't make sense to you, there are many XML tutorials (http://directory.google.com/Top/Computers/Data_Formats/Markup_Languages/XML/Resources/FAQs,_Help,_and_Tutorials/) that can explain the basics.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#25509;&#19979;&#26469;&#30340;&#20004;&#31456;&#26159;&#20851;&#20110;python&#20013;&#30340;xml&#36827;&#31243;&#30340;&#12290;&#22914;&#26524;&#20320;&#30693;&#36947;xml&#25991;&#26723;&#32467;&#26500;&#30475;&#36215;&#26469;&#20687;&#20160;&#20040;&#65292;&#19979;&#38754;&#23558;&#26159;&#23545;&#20320;&#26377;&#24110;&#21161;&#30340;&#12290;&#23427;&#30001;&#32467;&#26500;&#26631;&#31614;&#24418;&#25104; &#19968;&#20010;&#20803;&#32032;&#30340;&#23618;&#27425;{hierarchy},&#31561;&#31561;&#12290;&#22914;&#26524;&#36825;&#20010;&#19981;&#33021;&#24341;&#36215;&#20320;&#30340;&#20852;&#36259;&#65292;&#36825;&#37324;&#26377;&#26356;&#22810;&#20851;&#20110;xml&#30340;&#25945;&#31243;{tutorials}(http://directory.google.com/Top/Computers/Data_Formats/Markup_Languages/XML/Resources/FAQs,_Help,_and_Tutorials/)([popexizhi]&#22312;&#26412;&#26426;&#19978;&#25171;&#24320;&#19968;&#27425;&#36825;&#20010;&#22320;&#22336;&#25552;&#31034;404&#65292;&#22238;&#22836;&#25214;&#25214;&#26159;&#19981;&#26159;&#30495;&#30340;&#22833;&#25928;&#36824;&#26159;&#33258;&#24049;&#26426;&#23376;&#30340;&#38382;&#39064;) &#160;&#21487;&#20197;&#29992;&#26469;&#35299;&#37322;&#22522;&#30784;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1335922523859" MODIFIED="1335922812125">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P120
    </p>
    <p>
      If you're not particularly interested in XML, you should still read these chapters, which cover important topics like Python packages, Unicode, command line arguments, and how to use getattr for method dispatching.
    </p>
    <p>
      [pope&#35793;] &#22914;&#26524;&#20320;&#23545;xml&#19981;&#26159;&#29305;&#21035;{particularyly}&#26377;&#20852;&#36259;,&#20320;&#20063;&#24212;&#35813;&#38405;&#35835;&#26412;&#31456;&#65292;&#22240;&#20026;&#23427;&#28085;&#30422;&#20102; &#37325;&#35201;&#30340;&#20027;&#39064;{topics}&#20363;&#22914;python &#23553;&#21253;{packages}&#65292;Unicode,&#21629;&#20196;&#34892;&#21442;&#25968;&#65292;&#20197;&#21450;&#22914;&#20309;&#20351;&#29992;getattr &#26041;&#27861;&#30340;&#35843;&#29992;{dispatching}.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1335923152703" MODIFIED="1336095423953">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [/&#21407;&#25991;]P120
    </p>
    <p>
      Being a philosophy major is not required, although if you have ever had the misfortune of being subjected to the writings of Immanuel Kant, you will appreciate the example program a lot more than if you majored in something useful, like computer science.
    </p>
    <p>
      [pope&#35793;]&#23601;&#20687;&#20320;&#20889;&#19968;&#20010;&#20851;&#20110;&#24247;&#24503;{Immanuel Kant} &#30340;&#24754;&#21095;{misfortune}&#20027;&#39064;{subjected}&#65292;&#19981;&#38656;&#35201;&#19968;&#23450;&#20462;&#21746;&#23398;&#19987;&#19994;{philosophy major}&#19968;&#26679;&#65292;&#20320;&#21487;&#20197;&#39046;&#20250;{appreciate}&#31243;&#24207;&#20363;&#23376;&#20013;&#22810;&#25968;&#23545;&#20320;&#21448;&#26377;&#30340;&#65292;[?]like computer science &#26159;&#35841;&#30340;&#23450;&#35821;&#65311;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1336095425203" MODIFIED="1336355745953">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P120
    </p>
    <p>
      There are two basic ways to work with XML. One is called SAX (&quot;Simple API for XML&quot;), and it works by reading
    </p>
    <p>
      the XML a little bit at a time and calling a method for each element it finds. (If you read Chapter 8, HTML
    </p>
    <p>
      Processing, this should sound familiar, because that's how the sgmllib module works.) The other is called DOM
    </p>
    <p>
      (&quot;Document Object Model&quot;), and it works by reading in the entire XML document at once and creating an internal
    </p>
    <p>
      representation of it using native Python classes linked in a tree structure. Python has standard modules for both kinds of parsing, but this chapter will only&#160;deal with using the DOM.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      xml&#26377;&#20004;&#31181;&#22522;&#26412;&#24037;&#20316;&#26041;&#24335;&#65292;&#19968;&#31181;&#21483;&#20570;SAX&#65288;xml&#31616;&#21333;api&#65289;&#65292;&#23427;&#30340;&#24037;&#20316;&#36890;&#36807;&#19968;&#27425;&#38405;&#35835;&#19968;&#20010;xml&#22359;&#24182;&#19988;&#35843;&#29992;&#27599;&#20010;&#23545;&#24212;&#20803;&#32032;&#30340;&#26041;&#27861;&#25214;&#21040;&#23427;&#12290;&#65288;&#22914;&#26524;&#20320;&#35835;&#36807;&#31532;&#20843;&#31456;&#65292;HTML&#22788;&#29702;&#65292;&#24212;&#35813;&#21548;&#36807;&#21516;&#26679;&#30340;&#22788;&#29702;&#26041;&#27861;&#65292;&#22240;&#20026;&#36825;&#20010;&#23601;&#26159;sgmllib&#27169;&#22359;&#30340;&#22788;&#29702;&#26041;&#24335;&#65289;&#65307;&#21478;&#22806;&#19968;&#31181;&#21483;&#20570;DOM&#65288;&#25991;&#26723;&#23545;&#35937;&#27169;&#24335;&#65289; &#65292;&#23427;&#30340;&#24037;&#20316;&#21407;&#29702;&#26159;&#36890;&#36807;&#19968;&#27425;&#35835;&#21462;&#25972;&#20010;{entire}&#30340;xml&#24182;&#19988;&#21019;&#24314;&#20869;&#37096;&#25551;&#36848;{internal representation} &#23427;&#20351;&#29992;&#26412;&#22320;&#30340;python&#31867;&#23884;&#20837;&#24335;&#26641;&#29366;&#32467;&#26500;&#12290;python&#21253;&#21547;&#26631;&#20934;&#27169;&#24335; &#20026;&#20004;&#31181;&#27169;&#24335;&#30340;&#35821;&#27861;&#20998;&#26512;&#65292;&#20294;&#26159;&#26412;&#31456;&#21482;&#20351;&#29992;dom&#26041;&#24335;&#22788;&#29702;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1336355765031" MODIFIED="1337565104218">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Example 9.1. kgp.py P120
    </p>
    <p>
      Example 9.2. toolbox.py P124
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1337565101296" FOLDED="true" MODIFIED="1337910093500">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Example 9.3. Sample output of kgp.py
    </p>
  </body>
</html></richcontent>
<node CREATED="1337738247046" MODIFIED="1337738247046">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;] P126
    </p>
    <p>
      This is, of course, complete gibberish. Well, not complete gibberish. It is syntactically and grammatically correct
    </p>
    <p>
      (although very verbose &#8722;&#8722; Kant wasn't what you would call a get&#8722;to&#8722;the&#8722;point kind of guy).
    </p>
    <p>
      [pope&#35793;] &#36825;&#20010;&#24403;&#28982;&#26159;&#23436;&#20840;&#30340;&#20081;&#35828;{gibberish}&#65292;&#20063;&#19981;&#23436;&#20840;&#26159;&#12290;&#36825;&#20010;&#22312;&#21477;&#23376;&#32467;&#26500;&#21644;&#35821;&#27861;&#32467;&#26500;&#26159;&#26159;&#38169;&#30340;&#65288;&#23613;&#31649;&#26377;&#28857;&#20799;&#38271;--&#24247;&#24503;{Kant}&#19981;&#26159;&#20320;&#31216;&#20026;get-to-the-point &#31867;&#22411;&#30340;&#30007;&#23401;[?]&#36825;&#20010;get-to-the-point&#26159;&#20160;&#20040;&#24847;&#24605;&#65311;&#26159;&#26377;&#38382;&#39064;&#30340;&#24102;&#28857;&#20799;&#30340;&#21527;&#65311;:)&#36825;&#20010;&#21487;&#26159;&#25105;&#23478;&#30340;&#26041;&#35328;&#21834;&#65281;&#65289;
    </p>
    <p>
      
    </p>
    <p>
      &#160;Some of it may actually be true (or at least the sort of thing that Kant would have agreed with), some of it is blatantly false, and most of it is simply incoherent. But all of it is in the style of Immanuel Kant.
    </p>
    <p>
      [pope&#35793;]&#20854;&#20013;&#30340;&#19968;&#20123;&#20107;&#23454;&#19978;&#26159;&#30495;&#23454;&#30340;&#65288;&#25110;&#32773;&#33267;&#23569;&#35832;&#22914;&#27492;&#31867;&#30340;&#20107;&#24773;{the sort of thing}&#24247;&#24503;{Kant}&#26159;&#36190;&#25104;&#30340;&#65289;&#65292;&#20854;&#20013;&#19968;&#20123;&#26159;&#20247;&#25152;&#21608;&#30693;{blatantly}&#30340;&#38169;&#35823;,&#26377;&#19968;&#20123;&#21482;&#26159;&#19981;&#36830;&#36143;&#32780;&#24050;&#12290;&#20294;&#26159;&#36825;&#20123;&#21512;&#36215;&#26469;&#30340;&#20840;&#37096;&#23601;&#26159;&#24247;&#24503;{Immanuel Kant}&#30340;&#39118;&#26684;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1337738250671" MODIFIED="1337910092609">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P126
    </p>
    <p>
      Let me repeat that this is much, much funnier if you are now or have ever been a philosophy major.
    </p>
    <p>
      
    </p>
    <p>
      The interesting thing about this program is that there is nothing&#160;Kant&#8722;specific about it.
    </p>
    <p>
      
    </p>
    <p>
      [pope &#35793;]&#22914;&#26524;&#20320;&#29616;&#22312;&#26377;&#21746;&#29702;&#24863;&#21463;&#65292;&#35753;&#25105;&#20204;&#37325;&#36848;&#26356;&#22810;&#30340;&#28369;&#31293;[?]&#22075;&#22075;&#65292;&#36825;&#20004;&#20010;&#26377;&#20851;&#21527;&#65311;&#33258;&#24049;&#32763;&#35793;&#38169;&#20102;&#21543;&#65311;&#65306;&#65289;
    </p>
    <p>
      &#20851;&#20110;&#36825;&#20010;&#31243;&#24207;&#30340;&#26377;&#36259;&#20043;&#22788;&#26159;&#36825;&#37324;&#27809;&#20219;&#20309;&#19982;&#24247;&#24503;{Kant} &#26377;&#20855;&#20307;&#20851;&#31995;{specific about it}[?]&#22075;&#22075;&#36825;&#20010;Kant-specifc &#30340;&#30772;&#25240;&#21495;&#26159;&#20570;&#20160;&#20040;&#29992;&#30340;&#65311;&#33258;&#24049;&#27599;&#27425;&#36935;&#21040;&#36825;&#20010;&#23601;&#19981;&#30693;&#22914;&#20309;&#29702;&#35299;&#20102;&#65292;&#22238;&#22836;&#26597;&#19968;&#19979;&#33521;&#25991;&#20013;&#30772;&#25240;&#21495;&#30340;&#29992;&#27861;&#21543;&#65281;
    </p>
    <p>
      
    </p>
    <p>
      All the content in the previous example was derived from the grammar file, kant.xml. If you tell the program to use a different grammar file (which you can specify on the command line), the output will be completely different.
    </p>
    <p>
      [pope&#35793;]&#20043;&#21069;{previous} &#20363;&#23376;&#20013;&#30340;&#20840;&#37096;&#20869;&#23481; &#28304;&#33258;{derived} kant.xml&#30340;&#31243;&#24207;&#25991;&#20214;&#12290;&#22914;&#26524;&#20320;&#21578;&#35785;&#31243;&#24207;&#20351;&#29992;&#19981;&#21516;&#30340;&#31243;&#24207;&#25991;&#20214;&#65288;&#20320;&#21487;&#20197;&#22312;&#21629;&#20196;&#34892;&#20013;&#25351;&#23450;{specify}&#65289;,&#23601;&#20250;&#36755;&#20986;&#23436;&#20840;&#19981;&#21516;&#30340;&#19996;&#35199;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1337910081578" MODIFIED="1337910083359" TEXT="Example 9.4. Simpler output from kgp.py">
<node CREATED="1337911456640" MODIFIED="1338254724218">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [ &#21407;&#25991;]P126
    </p>
    <p>
      You will take a closer look at the structure of the grammar file later in this chapter. For now, all you need to know is
    </p>
    <p>
      that the grammar file defines the structure of the output, and the kgp.py program reads through the grammar and
    </p>
    <p>
      makes random decisions about which words to plug in where.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#22312;&#26412;&#31456;&#30340;&#21518;&#38754;&#37096;&#20998;&#65292;&#20320;&#23558;&#22312;&#20180;&#32454;&#30340;&#38405;&#35835;&#31243;&#24207;&#25991;&#20214;&#12290;&#29616;&#22312;&#65292;&#20320;&#21482;&#35201;&#30693;&#36947;&#31243;&#24207;&#25991;&#20214;&#23450;&#20041;&#36755;&#20986;&#32467;&#26500;&#65292;&#24182;&#19988;kgp.py &#35835;&#20837;&#31243;&#24207;&#24182;&#19988;&#38543;&#26426;&#20915;&#23450;&#21333;&#35789;&#30340;&#25554;&#20837;&#20301;&#32622;&#12290;[?]makes random decisions about which words to plug in where.&#36825;&#21477;&#30340;&#32763;&#35793;&#23545;&#21527;&#65311;&#33258;&#24049;&#24863;&#35273;&#26377;&#28857;&#20799;&#38382;&#39064;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1338254725328" FOLDED="true" MODIFIED="1342663361093" POSITION="right" TEXT="9.2. Packages">
<node CREATED="1338255865765" MODIFIED="1338256083703">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P126
    </p>
    <p>
      Actually parsing an XML document is very simple: one line of code. However, before you get to that line of code, you need to take a short detour to talk about packages.
    </p>
    <p>
      [pope &#35793;] &#23454;&#38469;&#19978;{actually} &#35821;&#27861;&#20998;&#26512;{parsing} xml &#25991;&#26723;&#26159;&#24456;&#31616;&#21333;&#30340;&#65306;&#19968;&#34892;&#20195;&#30721;&#12290;&#28982;&#32780;&#65292;&#22312;&#20320;&#30475;&#30528;&#19968;&#34892;&#20195;&#30721;&#20043;&#21069;&#65292;&#20320;&#38656;&#35201;&#32469;&#20010;&#23567;&#24367;{a short detour} &#35752;&#35770;&#19968;&#19979;&#21253;{packages}.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1338256086062" MODIFIED="1338256315203">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Example 9.5. Loading an XML document (a sneak peek)
    </p>
    <p>
      [pope &#35793;] a sneak peek &#25250;&#20808;&#20102;&#35299;&#19968;&#19979; [?] &#22075;&#22075;&#65292;&#36825;&#20010;&#32763;&#35793;&#26377;&#24847;&#24605;&#65292;sneak ,peek,&#30452;&#25509;&#32763;&#35793;&#37117;&#26159;&#20599;&#20599;&#30340;&#21160;&#20316;&#65292;&#24590;&#20040;&#21512;&#36215;&#26469;&#23601;&#25104;&#20102;&#25250;&#20808;&#30340;&#65292;&#20180;&#32454;&#20102;&#35299;&#20063;&#35828;&#30340;&#36807;&#21435;&#65292;&#30475;&#26469;&#36825;&#20004;&#20010;&#35789;&#30340;&#21547;&#20041;&#20013;&#30340;&#20445;&#23494;&#24615;&#21644;&#26102;&#38388;&#26377;&#20851;&#65292;&#22312;&#20180;&#32454;&#20307;&#20250;&#21543;&#65281;
    </p>
    <p>
      &gt;&gt;&gt; from xml.dom import minidom ----------------------------------------------------------------1
    </p>
    <p>
      &gt;&gt;&gt; xmldoc = minidom.parse('~/diveintopython/common/py/kgp/binary.xml')
    </p>
  </body>
</html></richcontent>
<node CREATED="1338256326562" MODIFIED="1338429274500">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;] P126
    </p>
    <p>
      This is a syntax you haven't seen before. It looks almost like the from module import you know and love, but the &quot;.&quot; gives it away as something&#160;above and beyond a simple import. In fact, xml is what is known as a package, dom is a nested package within xml, and minidom is a module within xml.dom.
    </p>
    <p>
      
    </p>
    <p>
      [pope &#35793;] &#36825;&#26159;&#19968;&#20010;&#20043;&#21069;&#20320;&#27809;&#26377;&#35265;&#36807;&#30340;&#21477;&#27861;&#12290;&#23427;&#30475;&#36215;&#26469;&#23601;&#20687;&#20320;&#30693;&#36947;&#21644;&#21916;&#27426;&#30340;from module,&#20294;&#26159;&#36825;&#20010;&quot;.&quot;&#20351;&#23427;&#19981;&#21516;&#20110;&#31616;&#21333;&#30340;import.&#23454;&#38469;&#19978;&#65292;xml&#20316;&#20026;&#21253;&#34987;&#20102;&#35299;&#30340;&#65292;dom&#26159;&#19968;&#20010;&#23884;&#22871;{nested}&#20869;&#23481;&#34987;&#25918;&#20837;xml&#21253;&#20013;&#65292;&#32780;minidom&#26159;xml.dom&#30340;&#19968;&#20010;&#27169;&#22359;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1338429286843" MODIFIED="1339120060834">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P126
    </p>
    <p>
      That sounds complicated, but it's really not. Looking at the actual implementation may help. Packages are&#160;little more
    </p>
    <p>
      than directories of modules; nested packages are subdirectories. The modules within a package (or a nested package) are still just .py files,&#160;like always, except that they're in a subdirectory instead of the main lib/ directory of your
    </p>
    <p>
      Python installation.
    </p>
    <p>
      
    </p>
    <p>
      [pope &#35793;] &#21548;&#36215;&#26469;&#25402;&#22797;&#26434;&#30340;{complicated},&#20294;&#20854;&#23454;&#19981;&#26159;&#36825;&#26679;&#30340;&#12290;&#30475;&#19968;&#19979;&#23454;&#38469;&#30340;&#32452;&#35013;&#26041;&#24335;{actual implementation}&#21487;&#33021;&#26377;&#24110;&#21161;&#12290;&#21253;&#26159;&#27604;&#27169;&#22359;<b>&#22320;&#22336;{directories}&#22823;&#19968;&#28857;{little more than }.</b>&#21253;&#37324;<b>&#23884;&#22871;&#30340;{nested}</b>&#26159;<b>&#23376;&#30446;&#24405;{subdirectories}.</b>&#21253;&#20013;&#30340;&#27169;&#22359;(&#25110;&#32773;&#23884;&#22871;{nested}&#22312;&#21253;&#37324;)&#20173;&#28982;&#26159;.py&#25991;&#20214;&#65292;&#20687;&#24448;&#24120;&#19968;&#26679;{like alaways}&#65292;&#38500;&#38750;&#20182;&#20204;&#26159;&#23376;&#30446;&#24405;&#30340;&#20195;&#26367;main &#30340;lib/ &#30446;&#24405;&#22312;&#20320;&#30340;python&#160;&#160;&#35013;&#37197;{installation}&#20013;.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1339120058428" MODIFIED="1340071134515">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P127
    </p>
    <p>
      So when you say from xml.dom import minidom, Python figures out that that means &quot;look in the xml directory for a dom directory, and look in that for the minidom module, and import it as minidom&quot;.
    </p>
    <p>
      [pope&#35793;]&#25152;&#20197;&#24403;&#20320;&#35828;&#20174; xml.dom &#23548;&#20837; minidom ,Python &#35745;&#31639;&#20986;&#23427;&#30340;&#21547;&#20041;&#26159;&quot;&#20174;xml&#30446;&#24405;&#26597;&#35810;dom&#30446;&#24405;&#65292;&#24182;&#19988;&#22312;&#20854;&#20013;&#26597;&#35810;mimidom&#27169;&#22359;&quot;
    </p>
    <p>
      
    </p>
    <p>
      But Python is even smarter than that; not only can you import entire modules contained within a package, you can selectively import specific classes or functions from a module contained within a package.
    </p>
    <p>
      [pope&#35793;] &#20294;Python &#35201;&#27604;&#36825;&#20010;&#20570;&#30340;&#36824;&#28418;&#20142;&#65292;&#19981;&#21482;&#26159;&#20320;&#33021;&#23548;&#20837;package&#20013;&#30340;&#25972;&#20010;{entire}&#27169;&#22359;&#65292;&#20320;&#21487;&#20197;&#26377;&#36873;&#25321;&#30340;{selectively}&#20174;&#19968;&#20010;&#21253;&#30340;&#27169;&#22359;&#20013;&#23548;&#20837;&#29305;&#23450;&#30340;{specific}&#31867;&#25110;&#26159;&#20989;&#25968;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      You can also import the package itself as a module. The syntax is all the same; Python figures out what you mean based on the file&#160;layout of the package, and automatically does&#160;the right thing.
    </p>
    <p>
      [pope&#35793;]&#20320;&#20063;&#21487;&#20197;&#23548;&#20837;package&#26412;&#36523;&#20316;&#20026;&#27169;&#22359;&#12290;&#21477;&#27861;{syntax}&#26159;&#19968;&#26679;&#30340;&#65307;Python &#26159;&#22522;&#20110;package&#30340;&#24067;&#23616;{layout of } &#25214;&#21040;&#20320;&#35201;&#30340;&#25991;&#20214;&#65292;&#24182;&#19988;&#33258;&#21160;{automatically}&#20570;&#35813;&#25152;&#20316;&#30340;&#20107;&#30340;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1340071174703" FOLDED="true" MODIFIED="1341799098781" TEXT="Example 9.7. Packages are modules, too">
<node CREATED="1340071179234" FOLDED="true" MODIFIED="1341798954453">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      P127
    </p>
    <p>
      &gt;&gt;&gt; from xml.dom import minidom
    </p>
    <p>
      &gt;&gt;&gt; minidom
    </p>
    <p>
      &lt;module 'xml.dom.minidom' from 'C:\Python21\lib\xml\dom\minidom.pyc'&gt;
    </p>
    <p>
      &gt;&gt;&gt; minidom.Element
    </p>
    <p>
      &lt;class xml.dom.minidom.Element at 01095744&gt;
    </p>
    <p>
      &gt;&gt;&gt; from xml.dom.minidom import Element&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2
    </p>
    <p>
      &gt;&gt;&gt; Element
    </p>
    <p>
      &lt;class xml.dom.minidom.Element at 01095744&gt;
    </p>
    <p>
      &gt;&gt;&gt; minidom.Element
    </p>
    <p>
      &lt;class xml.dom.minidom.Element at 01095744&gt;
    </p>
    <p>
      &gt;&gt;&gt; from xml import dom
    </p>
    <p>
      &gt;&gt;&gt; dom
    </p>
    <p>
      &lt;module 'xml.dom' from 'C:\Python21\lib\xml\dom\__init__.pyc'&gt;
    </p>
    <p>
      &gt;&gt;&gt; import xml
    </p>
    <p>
      &gt;&gt;&gt; xml
    </p>
    <p>
      &lt;module 'xml' from 'C:\Python21\lib\xml\__init__.pyc'&gt;
    </p>
  </body>
</html></richcontent>
<node CREATED="1341279359515" MODIFIED="1341279359515" TEXT=""/>
<node CREATED="1341279493530" MODIFIED="1341280651796">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]
    </p>
    <p>
      Here you're importing a module (minidom) from a nested package (xml.dom). The result is that minidom is imported into your namespace, and in order to reference classes within the minidom module (like Element), you need to preface them with the module name.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#36825;&#37324;&#20320;&#20174;&#23884;&#22871;&#30340;{nested}&#21253;(xml.dom)&#20013;&#23548;&#20837;&#19968;&#20010;&#27169;&#22359;(minidom) .&#32467;&#26524;&#26159;minidom&#23548;&#20837;&#21040;&#20320;&#30340;&#21629;&#21517;&#31354;&#38388;&#20013;&#65292;&#24182;&#19988; &#20026;&#20102;&#24341;&#29992;minidom &#27169;&#22359;&#20013;&#30340;&#31867;(&#20687;Element&#19968;&#26679;)&#65292;&#20320;&#38656;&#35201;&#20197;{preface} &#27169;&#22359;&#21517;&#31216;&#24320;&#22987;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1341280554890" MODIFIED="1341454188656">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2. P127
    </p>
    <p>
      [&#21407;&#25991;]
    </p>
    <p>
      Here you are importing a class (Element) from a module (minidom) from a nested package (xml.dom). The result is that Element is imported directly into your namespace. Note that this does not interfere with the previous import; the Element class can now be referenced in two ways (but it's all still the same class).
    </p>
    <p>
      
    </p>
    <p>
      [pope &#35793;]
    </p>
    <p>
      &#36825;&#37324;&#20320;&#20174; &#19968;&#20010;&#23884;&#22871;&#30340;&#21253;(xml.dom)&#20013;&#27169;&#22359;(minidom) &#20013; &#24341;&#36827;{importing} &#20102;&#19968;&#20010;&#31867;(Element) &#12290;&#32467;&#26524;&#26159;Element &#30452;&#25509;{directly}&#23548;&#20837;&#21040;&#20320;&#30340;&#21629;&#21517;&#31354;&#38388;&#20013;&#12290;&#27880;&#24847;&#19968;&#19979;{note}&#36825;&#37324;&#24182;&#19981;&#24178;&#25200;{interfere with}&#20043;&#21069;{previous}&#30340;&#23548;&#20837;;Element&#31867;&#29616;&#22312;&#21487;&#20197;&#34987;&#20004;&#31181;&#26041;&#24335;&#24341;&#29992;(&#21482;&#26159;&#20840;&#37117;&#26159;&#19968;&#20010;&#30456;&#21516;&#30340;&#31867;)
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1341454134531" MODIFIED="1341798850890">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      3. P127
    </p>
    <p>
      Here you are importing the dom package (a nested package of xml) as a module&#160;in and&#160;of itself. Any level of a package can&#160;be treated as a module, as you'll see&#160;in a moment. It can even have its own attributes and methods, just the modules you've seen before
    </p>
    <p>
      
    </p>
    <p>
      [pope &#35793;]
    </p>
    <p>
      &#36825;&#37324;&#20320;&#23548;&#20837;dom &#21253;(&#23884;&#20837;xml&#30340;&#21253;) &#20316;&#20026;&#26412;&#36523;{in and of itself}&#20316;&#20026;&#27169;&#22359;
    </p>
    <p>
      &#160;&#160;&#160;&#160;[?]&#36825;&#20010;in and of itself&#25402;&#22855;&#24618;&#30340;&#65292;&#20043;&#21069;&#27809;&#26377;&#35265;&#36807;&#36825;&#20010;&#12290;
    </p>
    <p>
      &#20219;&#20309;&#32423;&#21035;&#30340;&#21253;&#37117;&#21487;&#20197;&#35270;&#20026;&#27169;&#22359;{be treated as &#34987;&#35270;&#20026;}&#65292;&#39532;&#19978;{in a moment} &#20320;&#23558;&#30475;&#21040;&#65292;&#23427;&#29978;&#33267;&#26377;&#23427;&#33258;&#24049;&#30340;&#23646;&#24615;&#21644;&#26041;&#27861;&#65292;&#23601;&#20687;&#20320;&#20043;&#21069;&#30475;&#21040;&#30340;&#27169;&#22359;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1341798883578" MODIFIED="1341798951296">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      4. P127
    </p>
    <p>
      [&#21407;&#25991;]
    </p>
    <p>
      Here you are importing the root level xml package as a module.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#36825;&#37324;&#20320;&#23548;&#20837;&#20102;&#26681;&#30446;&#24405;&#32423;&#21035;&#30340;xml&#21253;&#20316;&#20026;&#27169;&#22359;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1341799100078" MODIFIED="1341971183328">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P127
    </p>
    <p>
      
    </p>
    <p>
      So how can a package (which is just a directory on disk) be imported and treated as a module (which is always a file on disk)? The answer is the magical __init__.py file. You see, packages are not simply directories; they are directories with a specific file, __init__.py, inside. This file defines the attributes and methods of the package. For instance, xml.dom contains a Node class, which is defined in xml/dom/__init__.py. When you import a package as a module (like dom from xml), you're really importing its __init__.py file.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#37027;&#20040;&#21253;&#65288;&#23427;&#21487;&#26159;&#30913;&#30424;&#19978;&#30340;&#19968;&#20010;&#30446;&#24405;&#21834;&#65374;&#65374;&#65289;&#26159;&#22914;&#20309;&#34987;&#23548;&#20837;&#65292;&#24182;&#20316;&#20026;&#19968;&#20010;&#27169;&#22359;&#65288;&#23427;&#21487;&#20197;&#30913;&#30424;&#19978;&#30340;&#19968;&#20010;&#25991;&#20214;&#21834;&#65281;&#65374;&#65374;&#65289;&#30340;&#21602;&#65311;
    </p>
    <p>
      &#31572;&#26696;&#26159; &#26377;&#20010;&#31070;&#22855;&#30340; __init__.py&#25991;&#20214;&#12290;&#20320;&#30475;&#65292;&#21253;&#24182;&#19981;&#26159;&#31616;&#21333;&#30340;&#25991;&#20214;&#22841;&#65307;&#20182;&#20204;&#26159;&#21253;&#21547;&#29305;&#27530;&#25991;&#20214;__init__.py&#22312;&#20869;&#30340;&#25991;&#20214;&#22841;&#12290;&#36825;&#20010;&#25991;&#20214;&#23450;&#20041;&#20102;&#21253;&#30340;&#23646;&#24615;&#21644;&#26041;&#27861;&#12290;&#20030;&#20010;&#20363;&#23376;&#65292;xml.dom &#21253;&#21547; &#19968;&#20010; Node&#160;&#160;&#31867;&#65292;&#23427;&#23450;&#20041;&#22312;xml/dom/__init__.py&#20013;&#12290;&#24403;&#20320;&#23548;&#20837;&#21253;&#20316;&#20026;&#27169;&#22359;&#26102;&#65288;eg &#26469;&#33258;xml&#30340;dom&#65289;&#65292;&#20320;&#23454;&#38469;&#19978;{really}&#23548;&#20837;&#23427;&#30340;__init__.py&#25991;&#20214;&#20102;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1341971184812" MODIFIED="1341971623703">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P127
    </p>
    <p>
      A package is a directory with the special __init__.py file in it. The __init__.py file defines the attributes
    </p>
    <p>
      and methods of the package. It doesn't need to define anything; it can just be an empty file, but it has to exist. But if
    </p>
    <p>
      __init__.py doesn't exist, the directory is just a directory, not a package, and it can't be imported or contain
    </p>
    <p>
      modules or nested packages.
    </p>
    <p>
      
    </p>
    <p>
      [pope &#35793;]
    </p>
    <p>
      &#21253;&#26159;&#19968;&#20010;&#21253;&#21547;&#29305;&#27530;&#25991;&#20214;__init__.py&#30340;&#25991;&#20214;&#22841;&#12290;&#36825;&#20010;__init__.py&#25991;&#20214;&#23450;&#20041;&#21253;&#30340;&#23646;&#24615;&#21644;&#26041;&#27861;&#12290;&#23427;&#19981;&#38656;&#35201;&#23450;&#20041;&#20219;&#20309;&#20869;&#23481;&#65292;&#23427;&#20165;&#20165;&#21487;&#20197;&#26159;&#19968;&#20010;&#31354;&#25991;&#20214;&#65292;&#20294;&#23427;&#24517;&#39035;&#23384;&#22312;{has to exist}.&#20294;&#26159;&#22914;&#26524;__init__.py&#19981;&#23384;&#22312;&#65292;&#36825;&#20010;&#25991;&#20214;&#22841;&#20165;&#20165;&#26159;&#20010;&#25991;&#20214;&#22841;&#65292;&#19981;&#26159;&#21253;&#65292;&#23427;&#19981;&#33021;&#34987;&#23548;&#20837;&#25110;&#26159;&#21253;&#21547;&#22312;&#27169;&#22359;&#20013;&#25110;&#32773;&#23884;&#22871;&#22312;&#21253;&#37324;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1341971742390" MODIFIED="1342662007953">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P127
    </p>
    <p>
      So why bother with packages? Well, they provide a way to logically group related modules. Instead of having an xml package with sax and dom packages inside, the authors could have chosen to put all the sax functionality in xmlsax.py and all the dom functionality in xmldom.py, or even put all of it in a single module. But that would have been unwieldy (as of this writing, the XML package has over 3000 lines of code) and difficult to manage (separate source files mean multiple people can work on different areas simultaneously).
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#37027;&#20040;&#23545;&#21253;&#36824;&#22256;&#24785;&#21527;&#65311;&#24456;&#22909;&#65292;&#20182;&#20204;&#20174;&#36923;&#36753;&#19978;{logically}&#25552;&#20379;&#19968;&#31181;&#26041;&#24335;&#32452;&#32455;&#26377;&#32852;&#31995;{related}&#27169;&#22359;&#12290;&#20195;&#26367;{instead of} &#21253;&#21547;sax &#21644; dom &#21253;&#22312;&#20869;&#30340;xml &#21253;&#160;&#160;&#22312;&#37324;&#38754;&#65292;&#20316;&#32773;&#21487;&#20197;&#36873;&#25321;&#25918;&#20840;&#37096;&#30340;sax &#21151;&#33021;{functionality} &#21040; xmlsax.py&#20013; &#24182;&#19988; &#25918;&#20840;&#37096;&#30340;dom &#21151;&#33021;{functionality} &#22312; xmldom.py&#20013;&#65292;&#29978;&#33267;&#25226;&#23427;&#20840;&#37117;&#25918;&#20837;&#19968;&#20010;&#31616;&#21333;&#30340;&#27169;&#22359;&#20013;&#12290;&#20294;&#26159;&#36825;&#26159;&#24858;&#34850;&#30340;{unwieldy}&#65288;&#20043;&#25152;&#20197;&#36825;&#26679;&#20889;&#65292;xml &#21253;&#20013;&#26377;3000&#22810;&#34892;&#20195;&#30721;&#65289; &#24182;&#19988; &#24456;&#38590;&#31649;&#29702;&#65288;&#20998;&#31163;{separate}&#21407;&#22987;&#25991;&#20214; &#24847;&#21619;&#30528;&#26377;&#26356;&#22810;&#20154;&#21487;&#20197;&#22312;&#19981;&#21516;&#33539;&#22260;&#21327;&#20316;&#24037;&#20316;{simultaneously}&#65289;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1342662383765" MODIFIED="1342662760187">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P128
    </p>
    <p>
      If you ever find yourself writing a large subsystem in Python (or, more likely, when you realize that your small subsystem has grown into a large one), invest some time designing a good package architecture. It's one of the many things Python is good at, so take advantage of it.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#22914;&#26524;&#20320;&#29992;Python &#20889;&#20102;&#19968;&#20010;&#22823;&#30340;&#23376;&#31995;&#32479;&#65288;&#25110;&#32773;&#65292;&#26356;&#26377;&#21487;&#33021;{likely},&#24403;&#20320;&#35748;&#35782;{realize}&#21040; &#20320;&#30340;&#23567;&#30340;&#23376;&#31995;&#32479;&#38271;&#25104;&#19968;&#20010;&#22823;&#23478;&#20249;:)&#65289; &#25237;{invest}&#19968;&#20123;&#26102;&#38388;&#35774;&#35745;&#19968;&#20010;&#22909;&#30340;&#21253;&#26500;&#26550;{architecture}.&#36825;&#26159;&#20247;&#22810;&#30340;Python&#30340;&#22909;&#22788;&#20043;&#19968;&#65292;&#25152;&#20197; &#20351;&#29992;&#19968;&#19979;&#36825;&#20010;&#20248;&#21183;{advantage}&#21543;.
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1342662777843" FOLDED="true" MODIFIED="1345425424359" POSITION="right" TEXT="9.3. Parsing XML">
<node CREATED="1342662833656" MODIFIED="1342663339453">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P128
    </p>
    <p>
      As I was saying, actually parsing an XML document is very simple: one line of code. Where you go from there is up
    </p>
    <p>
      to you.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#23601;&#20687;&#25105;&#36807;&#21435;&#35828;&#30340;&#65292;&#23454;&#38469;&#19978;{actually} &#23545;XML &#25991;&#26723;&#36827;&#34892;&#35821;&#27861;&#20998;&#26512;{parsing}&#38750;&#24120;&#31616;&#21333;:&#19968;&#34892;&#20195;&#30721;&#30340;&#20107;&#12290;&#22914;&#26524;&#20320;&#26469;&#33258;&#37027;&#37324;&#23601;&#32473;&#20320;{is up to you}[?] where you go from there is up to you.&#36825;&#20010;&#22914;&#20309;&#32763;&#35793;&#65292;&#21644;&#19978;&#19979;&#25991;&#26159;&#20160;&#20040;&#24847;&#24605;&#21834;&#65311;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1342663364312" MODIFIED="1342663365687" TEXT="Example 9.8. Loading an XML document (for real this time)">
<node CREATED="1342663386328" FOLDED="true" MODIFIED="1343266017078">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P128
    </p>
    <p>
      &gt;&gt;&gt; from xml.dom import minidom
    </p>
    <p>
      &gt;&gt;&gt; xmldoc = minidom.parse('~/diveintopython/common/py/kgp/binary.xml')&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2
    </p>
    <p>
      &gt;&gt;&gt; xmldoc&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3
    </p>
    <p>
      &lt;xml.dom.minidom.Document instance at 010BE87C&gt;
    </p>
    <p>
      &gt;&gt;&gt; print xmldoc.toxml
    </p>
    <p>
      &lt;?xml version=&quot;1.0&quot; ?&gt;
    </p>
    <p>
      &lt;grammar&gt;
    </p>
    <p>
      &lt;ref id=&quot;bit&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;1&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &lt;ref id=&quot;byte&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;\
    </p>
    <p>
      &lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &lt;/grammar&gt;
    </p>
  </body>
</html></richcontent>
<node CREATED="1343007564562" MODIFIED="1343007649390">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P128
    </p>
    <p>
      As you saw in the previous section, this imports the minidom module from the xml.dom package.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#23601;&#20687;&#20320;&#22312;&#21069;&#19968;&#31456;&#30475;&#21040;&#30340;&#37027;&#26679;&#65292;&#36825;&#20010;&#23548;&#20837;&#30340;minidom&#27169;&#22359;&#26469;&#33258;&#20110;xml.dom&#21253;
    </p>
    <p>
      
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1343007651328" MODIFIED="1343008669046">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2
    </p>
    <p>
      [&#21407;&#25991;]P128
    </p>
    <p>
      Here is the one line of code that does all the work: minidom.parse takes one argument and returns a parsed representation of the XML document. The argument can be many things; in this case, it's simply a filename of an XML document on my local disk. (To follow along, you'll need to change the path to point to your downloaded examples directory.) But you can also pass a file object, or even a file&#8722;like object. You'll take advantage of this flexibility later in this chapter.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#36825;&#37324;&#19968;&#34892;&#20195;&#30721;&#20570;&#20840;&#37096;&#24037;&#20316;:minidom.parse &#24102;&#19968;&#20010;&#21442;&#25968; &#24182;&#19988; &#36820;&#22238; &#19968;&#20010;&#35821;&#27861;&#20998;&#26512;{parsed} &#25551;&#36848;{representation}&#21518;&#30340;XML&#25991;&#26723;&#12290;&#36825;&#20010;&#21442;&#25968;&#21487;&#20197;&#26159;&#24456;&#22810;&#19996;&#35199;: &#36825;&#37324;&#20363;&#23376;&#20013;&#65292;&#23427;&#26159;&#31616;&#21333;&#30340;&#25105;&#30340;&#26412;&#22320;&#30913;&#30424;&#19978;&#30340;xml&#25991;&#26723;&#30340;&#25991;&#20214;&#21517;(&#21521;&#20570;&#36825;&#20010;&#20363;&#23376;{to follow along},&#20320;&#21482;&#38656;&#35201;&#20462;&#25913;&#20320;&#19979;&#36733;&#20363;&#23376;&#30340;&#25991;&#20214;&#22841;&#36335;&#24452;&#23601;&#21487;&#20197;)&#12290;&#20294;&#20320;&#20063;&#21487;&#20197;&#20256;&#36882;{pass}&#19968;&#20010;&#25991;&#20214;&#23545;&#35937;&#65292;&#29978;&#33267;&#26159;&#19968;&#20010;&#25991;&#20214;--&#23601;&#20687;&#25991;&#20214;&#19968;&#26679;&#12290;&#20320;&#23558;&#22312;&#26412;&#31456;&#31245;&#21518;&#30475;&#21040;&#36825;&#20010;&#28789;&#27963;&#24615;{fiexibility}&#30340;&#20248;&#21183;{advantage}.[?] &#36825;&#20010;&#26377;&#20010;&#38382;&#39064;&#21442;&#25968;&#20013;&#30452;&#25509;&#20351;&#29992;&#25991;&#20214;&#65292;&#23601;&#26159;&#37027;&#20010;even a file - like object &#65292;&#19982;&#21407;&#25991;&#20043;&#21069;&#25552;&#21040;&#30340;&#20351;&#29992;&#36335;&#24452;&#26377;&#20160;&#20040;&#19981;&#19968;&#26679;&#30340;&#22320;&#26041;&#65292;&#19981;&#26159;&#24456;&#26126;&#30333;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1343008685406" MODIFIED="1343265736156">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      3
    </p>
    <p>
      [&#21407;&#25991;]P128
    </p>
    <p>
      The object returned from minidom.parse is a Document object, a descendant of the Node class. This Document object is the root level of a complex tree&#8722;like structure of interlocking Python objects that completely represent the XML document you passed to minidom.parse.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#36825;&#20010;&#23545;&#35937;&#36820;&#22238;&#26469;&#33258;minidom.parse &#30340;&#25991;&#26723;&#23545;&#35937;&#65292;&#19968;&#20010;Node&#31867;&#30340;&#23376;&#31867;&#12290;&#36825;&#20010;&#25991;&#26723;&#23545;&#35937;&#26159;&#22797;&#21512;{complex}&#26641;&#30340;&#26681;&#33410;&#28857;--&#20687;&#36830;&#20018;{interiocking}Python &#23545;&#35937;&#30340;&#32467;&#26500; &#36825;&#20010;&#23436;&#20840;{completely}&#25551;&#36848;{repesent}XML&#25991;&#26723;&#65292;&#20320;&#20351;&#29992;minidom.parse.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1343265748609" MODIFIED="1343266001968">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      4
    </p>
    <p>
      [&#21407;&#25991;]P128
    </p>
    <p>
      toxml is a method of the Node class (and is therefore available on the Document object you got from minidom.parse). toxml prints out the XML that this Node represents. For the Document node, this prints out the entire XML document.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      toxml &#26159;Node&#31867;&#30340;&#19968;&#20010;&#26041;&#27861;&#65288;&#22240;&#27492;{therefore}&#21487;&#20197;&#20351;&#29992;{available} &#20110;&#36825;&#20010;&#20320;&#20174;minidom.parse&#24471;&#21040;&#30340;Documnet &#23545;&#35937;&#65289;&#12290;toxml &#25171;&#21360;&#20986;XML &#36825;&#20010;Node &#30340;&#25551;&#36848;&#12290;&#20174;&#36825;&#20010;Document node&#65292;&#25171;&#21360;&#20986;XML&#25991;&#26723;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1343266018578" MODIFIED="1343266236062">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      P128
    </p>
    <p>
      [&#21407;&#25991;]
    </p>
    <p>
      Now that you have an XML document in memory, you can start traversing through it.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#20320;&#30340;&#20869;&#23384;&#20013;&#29616;&#22312;&#26377;&#19968;&#20010;XML&#25991;&#26723;&#65292;&#20320;&#21487;&#20197;&#24320;&#22987;&#32763;&#35793;&#23427;&#20102;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1343266250906" FOLDED="true" MODIFIED="1343612860046">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Example 9.9. Getting child nodes
    </p>
  </body>
</html></richcontent>
<node CREATED="1343266561171" MODIFIED="1343612551015">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &gt;&gt;&gt; xmldoc.childNodes&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1
    </p>
    <p>
      [&lt;DOM Element: grammar at 17538908&gt;]
    </p>
    <p>
      &gt;&gt;&gt; xmldoc.childNodes[0]&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2
    </p>
    <p>
      &lt;DOM Element: grammar at 17538908&gt;
    </p>
    <p>
      &gt;&gt;&gt; xmldoc.firstChild&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3
    </p>
    <p>
      &lt;DOM Element: grammar at 17538908&gt;
    </p>
  </body>
</html></richcontent>
<node CREATED="1343352080000" MODIFIED="1343611820171">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P128
    </p>
    <p>
      Every Node has a childNodes attribute, which is a list of the Node objects. A Document always has only one child node, the root element of the XML document (in this case, the grammar element).
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#27599;&#20010;Node &#37117;&#26377;&#23376;&#33410;&#28857;&#30340;&#23646;&#24615;&#65292;&#36825;&#26159;&#19968;&#20010;Node &#23545;&#35937;&#30340;&#21015;&#34920;&#12290;&#36825;&#20010;XML&#25991;&#26723;&#30340;&#26681;&#39033;&#30446;&#20165;&#26377;&#19968;&#20010;&#23376;&#33410;&#28857;&#65288;&#24403;&#21069;&#36825;&#20010;&#20363;&#23376;&#20013;&#30340;&#35821;&#27861;&#20803;&#32032;&#65289;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1343611482390" MODIFIED="1343611811968">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2
    </p>
    <p>
      [&#21407;&#25991;]2
    </p>
    <p>
      To get the first (and in this case, the only) child node, just use regular list syntax. Remember, there is nothing special going on here; this is just a regular Python list of regular Python objects.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]&#24471;&#21040;&#31532;&#19968;&#20010;&#23376;&#33410;&#28857;&#65288;&#22312;&#36825;&#20010;&#20363;&#23376;&#20013;&#65292;&#21482;&#26377;&#19968;&#20010;&#65289;&#65292;&#20165;&#38656;&#35201;&#20351;&#29992;&#35268;&#21017;{regular} &#30340;&#35821;&#27861;&#21015;&#34920;&#12290;&#35760;&#24471;&#65292;&#36825;&#37324;&#27809;&#26377;&#20160;&#20040;&#29305;&#27530;&#30340;&#65292;&#36825;&#20165;&#26159;&#19968;&#20010; &#35268;&#21017;&#30340;{regular}Python &#23545;&#35937; &#30340; &#35268;&#21017;&#30340;{regular}Python &#21015;&#34920;.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1343611874125" MODIFIED="1343612221125">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      3
    </p>
    <p>
      [&#21407;&#25991;]P128
    </p>
    <p>
      Since getting the first child node of a node is a useful and common activity, the Node class has a firstChild attribute, which is synonymous with childNodes[0]. (There is also a lastChild attribute, which is synonymous with childNodes[&#8722;1].)
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#33719;&#24471;&#31532;&#19968;&#20010;&#33410;&#28857;&#30340;&#31532;&#19968;&#20010;&#23376;&#33410;&#28857; &#26159;&#26377;&#29992;&#24182;&#19988; &#26368;&#24120;&#20570;&#65292;&#36825;&#20010;Node &#31867;&#26377; firstChild &#23646;&#24615;&#65292;&#36825;&#20010;&#21516;&#20041;{synonymous}&#20110; childNodes[0].( &#21516;&#26679;&#26377;lastChild &#23646;&#24615;&#65292;&#21516;&#20041;&#20110;childNodes[-1])
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1343612553468" FOLDED="true" MODIFIED="1343612858265" TEXT="Example 9.10. toxml works on any node">
<node CREATED="1343612578078" MODIFIED="1343612600562">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &gt;&gt;&gt; grammarNode = xmldoc.firstChild
    </p>
    <p>
      &gt;&gt;&gt; print grammarNode.toxml
    </p>
    <p>
      &lt;grammar&gt;
    </p>
    <p>
      &lt;ref id=&quot;bit&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;1&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &lt;ref id=&quot;byte&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;\
    </p>
    <p>
      &lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &lt;/grammar&gt;
    </p>
  </body>
</html></richcontent>
<node CREATED="1343612627468" MODIFIED="1343612751921">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P129
    </p>
    <p>
      Since the toxml method is defined in the Node class, it is available on any XML node, not just the Document element.
    </p>
    <p>
      
    </p>
    <p>
      [pope &#35793;]
    </p>
    <p>
      toxml &#26041;&#27861;&#26159;&#40664;&#35748;&#30340;Node &#31867;&#30340;&#26041;&#27861;&#65292;&#23427;&#33021;&#34987;&#20219;&#20309;&#30340;XML &#33410;&#28857;&#20351;&#29992;&#65292;&#19981;&#21482;&#26159; Document &#20803;&#32032;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1343612862031" FOLDED="true" MODIFIED="1344994544359" TEXT="Example 9.11. Child nodes can be text">
<node CREATED="1343612871953" MODIFIED="1344994518453">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &gt;&gt;&gt; grammarNode.childNodes
    </p>
    <p>
      [&lt;DOM Text node &quot;\n&quot;&gt;, &lt;DOM Element: ref at 17533332&gt;, \
    </p>
    <p>
      &lt;DOM Text node &quot;\n&quot;&gt;, &lt;DOM Element: ref at 17549660&gt;, &lt;DOM Text node &quot;\n&quot;&gt;]
    </p>
    <p>
      &gt;&gt;&gt; print grammarNode.firstChild.toxml
    </p>
    <p>
      &gt;&gt;&gt; print grammarNode.childNodes[1].toxml()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3
    </p>
    <p>
      &lt;ref id=&quot;bit&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;1&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &gt;&gt;&gt; print grammarNode.childNodes[3].toxml()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;4
    </p>
    <p>
      &lt;ref id=&quot;byte&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;\
    </p>
    <p>
      &lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &gt;&gt;&gt; print grammarNode.lastChild.toxml
    </p>
  </body>
</html></richcontent>
<node CREATED="1343612940562" MODIFIED="1344993349437">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P129
    </p>
    <p>
      Looking at the XML in binary.xml, you might think that the grammar has only two child nodes, the two ref elements. But you're missing something: the carriage returns! After the '&lt;grammar&gt;' and before the first '&lt;ref&gt;' is a carriage return, and this text counts as a child node of the grammar element. Similarly, there is a carriage return after each '&lt;/ref&gt;'; these also count as child nodes. So grammar.childNodes is actually a list of 5 objects: 3 Text objects and 2 Element objects.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#30475;&#19968;&#19979;XML &#22312;binary.xml &#20013;&#65292;&#20320;&#21487;&#33021;&#35748;&#20026;&#36825;&#20010;&#35821;&#27861;&#20013;&#26377;&#20004;&#20010;&#23376;&#33410;&#28857;&#65292;&#36825;&#20004;&#20010;ref &#20803;&#32032;&#12290;&#20294;&#26159;&#20320;&#20002;&#20102;&#19968;&#20123;&#65306;&#22238;&#36710;&#31526;&#12290;&#22312;&lt;grammer&gt; &#20043;&#21518;&lt;ref&gt;&#20043;&#21069;&#30340;&#22238;&#36710;&#31526;&#65292;&#20197;&#25991;&#26412;&#20316;&#20026;&#36825;&#20010;grammer&#20803;&#32032;&#30340;&#23376;&#33410;&#28857;&#12290;&#30456;&#20284;&#22320;&#65292;&#22312;&lt;/ref&gt;&#20043;&#21518;&#30340;&#22238;&#36710;&#65292;&#20063;&#26159;&#19968;&#20010;&#23376;&#33410;&#28857;&#12290;&#25152;&#20197;grammer.childNodes &#23454;&#38469;&#19978;{actually} &#26377;5&#20010;&#23545;&#35937;:3&#20010;&#25991;&#26412;&#23545;&#35937;&#21644;2&#20010;&#20803;&#32032;&#23545;&#35937;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1344993351046" MODIFIED="1344994515265">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P129
    </p>
    <p>
      2
    </p>
    <p>
      The first child is a Text object representing the carriage return after the '&lt;grammar&gt;' tag and before the first '&lt;ref&gt;' tag.
    </p>
    <p>
      [pope&#35793;] &#39318;&#20010;&#23376;&#33410;&#28857;&#26159;&#25991;&#26412;&#23545;&#35937;&#26159;&lt;grammar&gt;&#20043;&#21518;&lt;ref&gt;&#20043;&#21069;&#30340; [&#23637;&#31034;&#20026;{representing}]&#22238;&#36710;&#31526;
    </p>
    <p>
      3.
    </p>
    <p>
      The second child is an Element object representing the first ref element.
    </p>
    <p>
      [pope&#35793;] &#31532;&#20108;&#20010;&#23376;&#33410;&#28857;&#26159;&#19968;&#20010;&#20803;&#32032;&#23545;&#35937;&#65292;&#23637;&#31034;&#20026;{representing}&#20026;&#31532;&#19968;&#20010;ref&#20803;&#32032;&#12290;
    </p>
    <p>
      4.
    </p>
    <p>
      The fourth child is an Element object representing the second ref element.
    </p>
    <p>
      [pope&#35793;] &#31532;&#22235;&#20010;&#23376;&#33410;&#28857;&#26159;&#23637;&#31034;&#20026;{representing}&#30340;ref&#20803;&#32032;&#30340;&#31532;&#20108;&#20010;&#20803;&#32032;&#23545;&#35937;&#12290;
    </p>
    <p>
      5.
    </p>
    <p>
      The last child is a Text object representing the carriage return after the '&lt;/ref&gt;' end tag and before the '&lt;/grammar&gt;' end tag.
    </p>
    <p>
      [pope&#35793;] &#26368;&#21518;&#19968;&#20010;&#23376;&#33410;&#28857;&#25991;&#26412;&#23545;&#35937;&#23637;&#31034;&#20026;{representing}&lt;/ref&gt;&#20043;&#21518;&lt;/grammar&gt;&#20043;&#21069;&#30340;&#22238;&#36710;&#31526;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1344994541765" MODIFIED="1344994542656" TEXT="Example 9.12. Drilling down all the way to text">
<node CREATED="1344995521046" MODIFIED="1344995642484">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &lt;ref id=&quot;bit&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;1&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      
    </p>
    <p>
      &gt;&gt;&gt; grammarNode&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &lt;DOM Element: grammar at 19167148&gt;
    </p>
    <p>
      &gt;&gt;&gt; refNode = grammarNode.childNodes[1]&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1
    </p>
    <p>
      &gt;&gt;&gt; refNode
    </p>
    <p>
      &lt;DOM Element: ref at 17987740&gt;
    </p>
    <p>
      &gt;&gt;&gt; refNode.childNodes&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2
    </p>
    <p>
      [&lt;DOM Text node &quot;\n&quot;&gt;, &lt;DOM Text node &quot;&#160;&#160;&quot;&gt;, &lt;DOM Element: p at 19315844&gt;, \
    </p>
    <p>
      &lt;DOM Text node &quot;\n&quot;&gt;, &lt;DOM Text node &quot;&#160;&#160;&quot;&gt;, \
    </p>
    <p>
      &lt;DOM Element: p at 19462036&gt;, &lt;DOM Text node &quot;\n&quot;&gt;]
    </p>
    <p>
      &gt;&gt;&gt; pNode = refNode.childNodes[2]
    </p>
    <p>
      &gt;&gt;&gt; pNode
    </p>
    <p>
      &lt;DOM Element: p at 19315844&gt;
    </p>
    <p>
      &gt;&gt;&gt; print pNode.toxml()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3
    </p>
    <p>
      &lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &gt;&gt;&gt; pNode.firstChild&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;4
    </p>
    <p>
      &lt;DOM Text node &quot;0&quot;&gt;
    </p>
    <p>
      &gt;&gt;&gt; pNode.firstChild.data&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;5
    </p>
    <p>
      u'0'
    </p>
  </body>
</html></richcontent>
<node CREATED="1344995663296" MODIFIED="1344995832562">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P130
    </p>
    <p>
      As you saw in the previous example, the first ref element is grammarNode.childNodes[1], since childNodes[0] is a Text node for the carriage return.
    </p>
    <p>
      [pope&#35793;] &#23601;&#20687;&#20320;&#30475;&#21040;&#30340;&#21069;&#38754;&#30340;&#20363;&#23376;&#65292;&#36825;&#20010;&#31532;&#19968;&#20010;ref &#20803;&#32032;&#26159; grammarNode.childNodes[1],&#22312;grammarNode.childNodes[0]&#36825;&#20010;&#25991;&#26412;&#20803;&#32032;&#22238;&#36710;&#31526;&#20043;&#21518;&#12290;
    </p>
    <p>
      &#160;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1344995854375" MODIFIED="1345425400812">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P130
    </p>
    <p>
      2.
    </p>
    <p>
      The ref element has its own set of child nodes, one for the carriage return, a separate one for the spaces, one for the p element, and so forth.
    </p>
    <p>
      [pope&#35793;] &#36825;&#20010;ref &#20803;&#32032;&#26159;&#23427;&#33258;&#24049;&#35774;&#32622;&#30340;&#19968;&#20010;&#23376;&#33410;&#28857;&#65292;&#19968;&#20010;&#22238;&#36710;&#31526;&#65292;&#19968;&#20010;&#31354;&#26684;&#30340;&#20998;&#21106;&#31526;,&#19968;&#20010;p&#20803;&#32032; &#31561;&#31561;{and so forth}
    </p>
    <p>
      3.
    </p>
    <p>
      You can even use the toxml method here, deeply nested within the document.
    </p>
    <p>
      [pope&#35793;] &#36825;&#37324; &#20320;&#29978;&#33267;&#21487;&#20197;&#23545;&#28145;&#23618;&#23884;&#22871;&#30340;&#36825;&#20010;&#25991;&#20214; &#20351;&#29992;toxml &#26041;&#27861;&#65292;
    </p>
    <p>
      4.
    </p>
    <p>
      The p element has only one child node (you&#160;can't tell that from this example, but look at pNode.childNodes if you don't believe me), and it is a Text node for the single character '0'.
    </p>
    <p>
      [pope&#35793;] &#36825;&#20010;p&#20803;&#32032;&#21482;&#26377;&#19968;&#20010;&#23376;&#33410;&#28857;(&#36825;&#20010;&#20363;&#23376;&#20013;&#20320;&#27809;&#26377;&#34987;&#21578;&#30693;&#65292;&#20294;&#22914;&#26524;&#20320;&#19981;&#30456;&#20449;&#65292;&#21487;&#20197;&#30475;&#19968;&#19979;PNode.childNodes.)
    </p>
    <p>
      5.
    </p>
    <p>
      The .data attribute of a Text node gives you the actual string that the text node represents. But what is that 'u' in front of the string? The answer to that deserves its own section.
    </p>
    <p>
      [pope&#35793;] &#36825;&#20010;.date &#23646;&#24615;&#32473;&#20320;&#36825;&#20010;&#25991;&#26412;&#33410;&#28857;&#30340;&#23454;&#38469;{actual}&#23383;&#31526; &#65292;&#21363;&#36825;&#20010;&#25991;&#26412;&#33410;&#28857;&#20195;&#34920;{represents}&#30340;&#20869;&#23481;.&#20294;&#20026;&#20160;&#20040;&#26377;&#19968;&#20010;u&#22312;&#23383;&#31526;&#20018;&#21069;&#21602;?&#31572;&#26696;&#26159;&#23427;&#33258;&#24049;&#31456;&#33410;{section}&#24212;&#24471;&#22320;{deserves}[?]that deserves its own section&#24212;&#35813;&#22914;&#20309;&#32763;&#35793;&#21602;?
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
</node>
<node CREATED="1345425427781" FOLDED="true" ID="ID_347227875" MODIFIED="1350264543436" POSITION="right" TEXT="9.4. Unicode">
<node CREATED="1345425714296" MODIFIED="1345426055750">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;] P130
    </p>
    <p>
      Unicode is a system to represent characters from all the world's different languages. When Python parses an XML document, all data is stored in memory as unicode.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] Unicode &#26159;&#31995;&#32479;&#29992;&#26469;&#23637;&#31034;{represent}&#20840;&#19990;&#30028;&#19981;&#21516;&#35821;&#35328;&#30340;&#30340;.&#24403; Python &#35821;&#27861;&#20998;&#26512;{parse} xml&#25991;&#26723;&#26102;&#65292;&#20840;&#37096;&#25968;&#25454;&#20197;unicde&#26684;&#24335;&#20648;&#23384;&#22312;&#20869;&#23384;&#20013;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1345426072859" ID="ID_956468510" MODIFIED="1345426129984">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P130
    </p>
    <p>
      You'll get to all that in a minute, but first, some background.
    </p>
    <p>
      [pope&#35793;]&#39532;&#19978;&#20320;&#23558;&#30475;&#21040;&#20840;&#37096;&#30340;&#20869;&#23481;&#65292;&#20294;&#26159;&#39318;&#20808;&#20102;&#35299;&#19968;&#19979;&#32972;&#26223;
    </p>
  </body>
</html></richcontent>
<node CREATED="1345426162406" MODIFIED="1345428011765">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P130
    </p>
    <p>
      Historical note.
    </p>
    <p>
      Before unicode, there were separate character encoding systems for each language, each using the same numbers (0&#8722;255) to represent that language's characters. Some languages (like Russian) have multiple conflicting standards about how to represent the same characters; other languages (like Japanese) have so many characters that they require multiple&#8722;byte character sets. Exchanging documents between systems was difficult because there was no way for a computer to tell for certain which character encoding scheme the document author had used; the computer only saw numbers, and the numbers could mean different things.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#21382;&#21490;&#35828;&#26126;
    </p>
    <p>
      &#22312;unicode &#20043;&#21069;&#65292;&#27599;&#31181;&#23884;&#20837;&#31995;&#32479;&#30340;&#29305;&#27530;&#35821;&#35328;&#20351;&#29992; &#21516;&#26679;&#30340;&#25968;&#23383;(0-255) &#20195;&#34920;&#33258;&#24049;&#30340;&#35821;&#35328;&#23383;&#31526;&#12290;&#19968;&#20123;&#35821;&#35328;(eg &#20420;&#35821;) &#26377;&#22810;&#31181;&#30456;&#20114;&#20914;&#31361;{conficting}&#30340;&#26631;&#20934;&#20851;&#20110;&#22914;&#20309;&#23637;&#31034;{represent}&#30456;&#21516;&#30340;&#23383;&#31526;;&#21478;&#19968;&#20123;&#35821;&#35328;(eg &#26085;&#35821;)&#26377;&#24456;&#22826;&#22810;&#30340;&#23383;&#31526;&#25152;&#20197;&#38656;&#35201;&#26356;&#22810;&#30340;&#23383;&#31526;&#35774;&#32622;&#12290;&#22312;&#19981;&#21516;&#31995;&#32479;&#20013;&#20132;&#25442;{exchanging}&#25991;&#20214; &#26159;&#24456;&#22256;&#38590;&#30340;&#22240;&#20026; &#27809;&#26377;&#26041;&#24335;&#21578;&#35785;&#35745;&#31639;&#26426; &#27492;&#25991;&#26723;&#20316;&#32773;&#20351;&#29992;&#30340; &#23383;&#31526;&#32534;&#30721; &#33539;&#22260;{scheme}(&#26159;&#20160;&#20040;)&#65307;&#35745;&#31639;&#26426;&#21482;&#30475;&#21040;&#25968;&#23383;&#65292;&#20294;&#36825;&#25968;&#23383;&#24847;&#21619;&#30528;&#19981;&#21516;&#30340;&#19996;&#35199;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      Then think about trying to store these documents in the same place (like in the same database table); you would need to store the character encoding alongside each piece of text, and make sure to pass it around whenever you passed the text around.
    </p>
    <p>
      [pope&#35793;] &#37027;&#20040;&#24819;&#19968;&#24819;&#23384;&#20648;&#36825;&#20123;&#25991;&#20214; &#20351;&#29992;&#30456;&#21516;&#30340;&#26041;&#24335;&#65288;eg&#21516;&#26679;&#30340;&#25968;&#25454;&#24211;&#34920;&#65289;&#65307;&#20320;&#35201;&#23384;&#20648;&#36825;&#20123;&#25991;&#23383;&#32534;&#30721; &#27599;&#19968;&#31181;&#25991;&#26412;&#22312;&#19968;&#36215;&#65292;&#24182;&#19988;&#30830;&#23450;&#32463;&#36807;&#22905;&#21608;&#22260;&#24403;&#20320;&#20256;&#36882;&#36825;&#20010;&#25991;&#26412;&#21608;&#22260;[?]&#36825;&#20010;&#32763;&#35793;&#30340;&#22909;&#19981;&#36890;&#21834;&#65281;&#22238;&#22836;&#21442;&#32771;&#19968;&#19979;&#21035;&#20154;&#30340;&#12290;
    </p>
    <p>
      
    </p>
    <p>
      Then think about multilingual documents, with characters from multiple languages in the same document. (They typically used escape codes to switch modes; poof, you're in Russian koi8&#8722;r mode, so character 241 means this; poof, now you're in Mac Greek mode, so character 241 means something else. And so on.) These are the problems which unicode was designed to solve.
    </p>
    <p>
      [pope&#35793;] &#37027;&#20040;&#24819;&#19968;&#19979;&#20351;&#29992;&#22810;&#31181;&#35821;&#35328;&#30340;{multilingual}&#25991;&#26723;,&#20351;&#29992;&#22810;&#31181;{multiple}&#35821;&#35328;&#23383;&#31526;&#30340;&#21516;&#19968;&#20010;&#25991;&#26723;&#12290;(&#20182;&#20204;&#20856;&#22411;{typically}&#20351;&#29992;&#29305;&#27530;&#23383;&#31526;&#30340;&#20132;&#25442;&#27169;&#24335;&#65307;poof[?]&#36825;&#20010;&#22075;&#22075;&#65292;&#22914;&#20309;&#32763;&#35793;&#21834;&#12290;&#20320;&#20351;&#29992;Russian koi8-r&#27169;&#24335;&#65292;&#23383;&#31526;241 &#24847;&#21619;&#30528;&#36825;&#20010;&#65292;&#29616;&#22312;&#20320;&#20351;&#29992;Mac Greek &#26041;&#24335;&#65292;&#23383;&#31526;241&#24847;&#21619;&#30528;&#30456;&#21516;&#30340;&#20869;&#23481;&#12290;&#31561;&#31561;:).&#36825;&#23601;&#26159;unicode&#35774;&#35745;&#20986;&#26469;&#34987;&#29992;&#26469;&#35299;&#20915;&#30340;&#38382;&#39064;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1345428028937" MODIFIED="1345686809140">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P131
    </p>
    <p>
      To solve these problems, unicode represents each character as a 2&#8722;byte number, from 0 to 65535.[5] Each 2&#8722;byte number represents a unique character used in at least one of the world's languages. (Characters that are used in multiple languages have the same numeric code.) There is exactly 1 number per character, and exactly 1 character per number. Unicode data is never ambiguous
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#20026;&#35299;&#20915;&#27492;&#38382;&#39064;&#65292;unicode&#160;&#160;&#23637;&#31034;&#19968;&#20010;&#23383;&#31526;&#38656;&#35201;2byte&#65292;&#20174;0-65535[5]. &#27599;&#20004;&#20010;&#23383;&#33410;&#23637;&#31034;&#19968;&#20010;&#21807;&#19968;{unique} &#23383;&#31526; &#26159;&#29992;&#19990;&#30028;&#35821;&#35328;&#23637;&#31034;&#30340;&#26368;&#23567;&#26041;&#24335;&#12290;(&#29992;&#20110;&#27599;&#31181;&#35821;&#35328;&#30340;&#23383;&#31526;&#65292;&#37117;&#26377;&#21516;&#26679;&#25968;&#37327;&#30340;&#32534;&#30721;&#12290;)&#27599;&#20010;&#23383;&#31526;&#25317;&#26377;&#19968;&#20010;&#20855;&#20307;&#30340;{exactlly} &#25968;&#23383;&#65292;&#19988;&#27599;&#20010;&#25968;&#23383;&#37117;&#20934;&#30830;&#30340;{exactly}&#23545;&#24212;&#19968;&#20010;&#23383;&#31526;&#12290;Unicode &#25968;&#23383;&#32477;&#19981;&#27169;&#26865;&#20004;&#21487;{ambiguous}.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1345686811000" MODIFIED="1346031449281">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]131
    </p>
    <p>
      Of course, there is still the matter of all these legacy encoding systems. 7&#8722;bit ASCII, for instance, which stores English characters as numbers ranging from 0 to 127. (65 is capital &quot;A&quot;, 97 is lowercase &quot;a&quot;, and so forth.) English has a very simple alphabet, so it can be completely expressed in 7&#8722;bit ASCII. Western European languages like French, Spanish, and German all use an encoding system called ISO&#8722;8859&#8722;1 (also called &quot;latin&#8722;1&quot;), which uses the 7&#8722;bit ASCII characters for the numbers 0 through 127, but then extends into the 128&#8722;255 range for characters like n&#8722;with&#8722;a&#8722;tilde&#8722;over&#8722;it (241), and u&#8722;with&#8722;two&#8722;dots&#8722;over&#8722;it (252). And unicode uses the same characters as 7&#8722;bit ASCII for 0 through 127, and the same characters as ISO&#8722;8859&#8722;1 for 128 through 255, and then extends from there into characters for other languages with the remaining numbers, 256 through 65535.
    </p>
    <p>
      
    </p>
    <p>
      [pope &#35793;] &#24403;&#28982;&#65292;&#36825;&#37324;&#20381;&#28982;&#26377;&#19968;&#20123;&#24773;&#20917;&#20851;&#20110;&#36951;&#30041;&#30340;{legacy}&#32534;&#30721;&#31995;&#32479;&#12290;&#20363;&#22914;&#65306;7&#23383;&#33410;&#30340;ASCII&#65292;&#23427;&#23384;&#20648;&#33521;&#35821;&#23383;&#31526;&#20316;&#20026;&#20174;0&#21040;127&#30340;&#25968;&#23383;&#24207;&#21015;{ranging}.(65 &#26159;&#39318;&#23383;&#31526;{capital}'A',97 &#26159;&#23567;&#20889;&#23383;&#31526;'a', &#20197;&#27492;&#31867;&#25512;{and so forth}.)&#33521;&#35821;&#26377;&#19968;&#20010;&#38750;&#24120;&#31616;&#21333;&#30340;&#23383;&#31526;&#34920;&#65292;&#25152;&#20197;&#21487;&#20197;&#34987;7&#23383;&#33410;&#30340;ASCII&#23436;&#20840;&#34920;&#31034;{expressed} .&#35199;&#27431;&#35821;&#35328;&#20363;&#22914;&#27861;&#35821;&#65292;&#35199;&#29677;&#29273;&#35821;{Spanish} &#21644;&#24503;&#35821;&#37117;&#20351;&#29992;ISO-8859-1&#32534;&#30721;&#31995;&#32479;(&#20063;&#21483;&#20570;&quot;latin-1&quot;{latin &#25289;&#19969;}),&#23427;&#20351;&#29992;&#20102;7-bit ASCII &#23383;&#31526; &#20174;0-127&#65292;&#20294;&#20063;&#25193;&#23637;&#21040;128-255 &#23383;&#31526;&#38598;&#34892;&#21015;{range}&#20363;&#22914; &#19978;&#38754;&#26377;&#19968;&#20010;&#27874;&#28010;&#31526;{tilde}&#30340;n(241)[popexizhi:&#24212;&#35813;&#26159;&#36825;&#20010;&#241;&#21543;&#65311;&#35199;&#29677;&#29273;&#38190;&#30424;&#26041;&#24335;&#20013;&#32654;&#24335;&#19979;&#30340;;&#25970;&#20986;&#26469;&#30340;] ,&#21644;&#26377;&#20004;&#20010;&#28857;{dots}&#30340;u(252).unicode &#20351;&#29992;&#30456;&#21516;&#30340;7-bit ASCII&#26631;&#35782; &#20174;0&#21040;127 &#65292;&#24182;&#19988;&#21516;&#26679;&#30340;ISO-8859-1 &#26631;&#35760;&#20174;128&#21040;255&#65292;&#28982;&#21518;&#25193;&#23637;&#20182;&#20204;&#30340;&#23383;&#31526;&#21040;&#21478;&#22806;&#30340;&#35821;&#35328;&#20174;256&#21040;65535&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1346031451234" MODIFIED="1346032708578">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]131
    </p>
    <p>
      When dealing with unicode data, you may at some point need to convert the data back into one of these other legacy encoding systems. For instance, to integrate with some other computer system which expects its data in a specific 1&#8722;byte encoding scheme, or to print it to a non&#8722;unicode&#8722;aware terminal or printer. Or to store it in an XML document which explicitly specifies the encoding scheme.
    </p>
    <p>
      [pope&#35793;] &#24403;&#22788;&#29702;unicode &#25968;&#25454; &#26102;&#65292;&#20320;&#21487;&#33021;&#22312;&#21516;&#19968;&#28857;&#25968;&#25454;&#22788;&#29702;&#26102;&#38656;&#35201;&#36820;&#22238;&#21040;&#21478;&#19968;&#31181;&#36951;&#30041;&#30340;{legacy}&#32534;&#30721;&#31995;&#32479;&#20013;&#12290;&#20363;&#22914;{for instance},&#21512;&#24182;{intergrate} &#19968;&#20123;&#20854;&#20182;&#35745;&#31639;&#26426;&#31995;&#32479; &#65292;&#26399;&#26395;{expects} &#22788;&#29702;&#23427;&#20204;&#21040; &#29305;&#23450;&#30340; 1-byte &#32534;&#30721;&#21306;&#22495;&#65292;&#25110;&#32773;&#25171;&#21360;&#23427;&#21040;&#38750;unicode &#30693;&#36947;{aware} &#30340;&#25216;&#26415;&#20013;&#25110;&#25171;&#21360;&#32773;&#20013;&#12290;&#29978;&#33267;&#26159;&#23384;&#20648;&#23427;&#21040;XML&#25991;&#26723; &#65292;&#23427;&#26126;&#30830;&#22320;{explicitly} &#20855;&#20307;&#30340;{specifies}&#32534;&#30721;&#23383;&#31526;&#21306;&#22495;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1346032723531" ID="ID_332701851" MODIFIED="1346635048484">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P131
    </p>
    <p>
      And on that note, let's get back to Python.
    </p>
    <p>
      Python has had unicode support throughout the language since version 2.0. The XML package uses unicode to store all parsed XML data, but you can use unicode anywhere.
    </p>
    <p>
      [pope&#35793;] &#22312;&#19979;&#19968;&#28857;&#65292;&#35753;&#25105;&#20204;&#36820;&#22238;&#21435;&#35828;Python.
    </p>
    <p>
      Python &#33258;&#20174;2.0&#24320;&#22987;&#26159;&#22312;&#25903;&#25345;unicode.XML&#21253;&#20351;&#29992;unicode&#23384;&#20648;XML&#25968;&#25454;&#65292;&#20294;&#20320;&#21487;&#20197;&#22312;&#20219;&#20309;&#20301;&#32622;&#20351;&#29992;unicode.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1346635121812" MODIFIED="1346635153015">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Example 9.13. Introducing unicode
    </p>
    <p>
      &gt;&gt;&gt; s = u'Dive in'&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1
    </p>
    <p>
      &gt;&gt;&gt; s
    </p>
    <p>
      u'Dive in'
    </p>
    <p>
      &gt;&gt;&gt; print s&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2
    </p>
    <p>
      Dive in
    </p>
  </body>
</html></richcontent>
<node CREATED="1346635315109" ID="ID_264615579" MODIFIED="1346635976328">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P131
    </p>
    <p>
      To create a unicode string instead of a regular ASCII string, add the letter &quot;u&quot; before the string. Note that this particular string doesn't have any non&#8722;ASCII characters. That's fine; unicode is a superset o f ASCII (a very large superset at that), so any regular ASCII string can also be stored as unicode.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#22312;&#23383;&#31526;&#21069;&#22686;&#21152;U&#65292;&#29992;&#20110;&#21019;&#24314;&#19968;&#20010;unicode &#23383;&#31526;&#20018;&#26367;&#20195;&#24120;&#35268;&#30340;{regular}ASCII&#20018;&#12290;&#35760;&#20303;&#36825;&#20010;&#35268;&#21017;&#30340;{particular}&#23383;&#31526;&#27809;&#26377;&#20219;&#20309;&#30340;ASCII&#23383;&#31526;&#12290;&#37027;&#24456;&#22909;:unicode &#26159;ASCII&#30340;&#25193;&#23637;&#38598;{supperset}&#65288;&#22312;&#37027;&#19978;&#38754;&#24456;&#38271;&#30340;&#25193;&#23637;&#65289;&#65292;&#25152;&#20197;&#20219;&#20309;&#30340;&#27491;&#24120;&#30340;{regular}ASCII&#23383;&#31526;&#20063;&#21487;&#20197;&#20351;&#29992;unicode&#23384;&#20648;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1346635978156" MODIFIED="1346636431843">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2
    </p>
    <p>
      [&#21407;&#25991;]P131
    </p>
    <p>
      When printing a string, Python will attempt to convert it to your default encoding, which is usually ASCII. (More on this in a minute.) Since this unicode string is made up of characters that are also ASCII characters, printing it has the same result as printing a normal ASCII string; the conversion is seamless, and if you didn't know that s was a unicode string, you'd never notice the difference.
    </p>
    <p>
      [pope&#35793;] &#24403;&#25171;&#21360;&#23383;&#31526;&#26102;&#65292;Python &#35797;&#22270;{attempt}&#20351;&#29992;&#40664;&#35748;&#30340;ASCII&#23383;&#31526;&#38598;&#12290;&#65288;&#20851;&#20110;&#36825;&#28857;&#19968;&#20250;&#20799;&#20171;&#32461;&#65289;&#12290;&#36825;&#20010;&#32452;&#25104;unicode &#30340;&#23383;&#31526;&#38598;&#20063;&#26159; ASCII &#23383;&#31526;&#38598;&#65292;&#25171;&#21360;&#23427;&#19982;&#25171;&#21360;&#27491;&#24120;&#30340;{normal]ASCII &#23383;&#31526;&#26377;&#30456;&#21516;&#30340;&#32467;&#26524;&#65307;&#36825;&#31181;&#26080;&#32541;&#38553;&#30340;{seamless}&#36716;&#25442;{conversion}&#65292;&#22914;&#26524;&#20320;&#19981;&#30693;&#36947;&#20160;&#20040;&#26159;unicode&#23383;&#31526;&#38598;&#65292;&#20320;&#23601;&#19981;&#20250;&#27880;&#24847;&#21040;&#26377;&#20160;&#20040;&#19981;&#21516;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1346636483359" FOLDED="true" ID="ID_1024746914" MODIFIED="1346895856312">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Example 9.14. Storing non&#8722;ASCII characters
    </p>
    <p>
      &gt;&gt;&gt; s = u'La Pe\xf1a
    </p>
    <p>
      &gt;&gt;&gt; print s
    </p>
    <p>
      Traceback (innermost last):
    </p>
    <p>
      &#160;&#160;File &quot;&lt;interactive input&gt;&quot;, line 1, in ?
    </p>
    <p>
      UnicodeError: ASCII encoding error: ordinal not in range(128)
    </p>
    <p>
      &gt;&gt;&gt; print s.encode('latin&#8722;1')&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;3
    </p>
    <p>
      La Pe&#241;a
    </p>
  </body>
</html></richcontent>
<node CREATED="1346636693906" MODIFIED="1346637444031">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P132
    </p>
    <p>
      The real advantage of unicode, of course, is its ability to store non&#8722;ASCII characters, like the Spanish&#160;&quot;&#241;&quot; (n with a tilde over it). The unicode character code for the tilde&#8722;n is 0xf1 in hexadecimal (241 in decimal), which you can type like this: \xf1
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#36825;&#20010;unicode&#30340;&#30495;&#27491;&#25913;&#36827;{advantage}&#20043;&#22788;,&#24403;&#28982;&#22905;&#21487;&#20197;&#23384;&#20648;&#20219;&#20309;&#30340;ASCII&#23383;&#31526;&#65292;&#20363;&#22914;&#35199;&#29677;&#29273;&#25991;&#20013;&#30340;&#160;&quot;&#241;&quot;(n &#22312;&#19978;&#38754;&#26377;&#19968;&#20010;&#27874;&#28010;&#32447;{tilde}).unicode&#23383;&#31526;&#23384;&#20648;&#26377;&#27874;&#28010;&#32447;{tilde}&#30340;n &#20351;&#29992; 16&#36827;&#21046;&#30340;{hexadecimal} 0xf1&#65288;&#21313;&#36827;&#21046;{decimal}&#30340;241&#65289;,&#20320;&#21487;&#20197;&#36755;&#20837;&#20687;&#36825;&#26679;:\xf1
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1346637055125" MODIFIED="1346894970125">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2
    </p>
    <p>
      [&#21407;&#25991;P132
    </p>
    <p>
      Remember I said that the print function attempts to convert a unicode string to ASCII so it can print it? Well, that's not going to work here, because your unicode string contains non&#8722;ASCII characters, so Python raises a UnicodeError error.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#35760;&#24471;&#25105;&#35828;&#36807;print &#20989;&#25968;&#35797;&#22270;{attempt] &#36716;&#21464;{convert } unicode &#32534;&#30721;&#21040;ASCII &#20013;&#25152;&#20197;&#21487;&#20197;&#25171;&#21360;&#65311;&#24456;&#22909;&#65292;&#36825;&#37324;&#27809;&#26377;&#25171;&#31639;&#36825;&#26679;&#20570;&#65292;&#22240;&#20026;&#20320;&#30340;unicode &#23383;&#31526;&#20018;&#20013;&#21253;&#21547;&#38750;ASCII &#23383;&#31526;&#65292;&#25152;&#20197;Python &#25351;&#20986;{ralses} UnicodeError &#38169;&#35823;&#12290;
    </p>
    <p>
      [?]
    </p>
    <p>
      &#25105;&#30340;python&#27979;&#35797;&#30340;&#32467;&#26524;&#26159;&#21487;&#20197;&#25171;&#21360;&#20986;&#26469;&#30340;&#65292;&#22914;&#19979;:
    </p>
    <p>
      IDLE 2.6.5&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &gt;&gt;&gt; s=u'La Pe\xf1a'
    </p>
    <p>
      &gt;&gt;&gt; s
    </p>
    <p>
      u'La Pe\xf1a'
    </p>
    <p>
      &gt;&gt;&gt; print s.encode('latin-1')
    </p>
    <p>
      La Pe&#39355;
    </p>
    <p>
      &gt;&gt;&gt; print s
    </p>
    <p>
      La Pe&#241;a
    </p>
    <p>
      
    </p>
    <p>
      &#22312;&#26412;&#20070;&#31532;&#19968;&#31456;&#25105;&#25214;&#21040;&#20316;&#32773;&#35201;&#27714;&#19979;&#36733;&#30340;ActivePython&#8722;2.2.2&#8722;224&#8722;win32&#8722;ix86.msi. for windows &#30475;&#26469;&#36825;&#20010;&#26080;&#27861;&#25171;&#21360;&#30340;&#29305;&#24615;&#24212;&#35813;&#36824;&#26159;2.2.2&#20013;&#30340;&#12290;&#25105;&#30340;&#26159;2.6.5&#20102;&#65292;&#27809;&#26377;&#36825;&#20010;&#38382;&#39064;&#20102;&#65292;&#22238;&#22836;&#21487;&#20197;&#26597;&#19968;&#19979;&#23448;&#26041;&#25991;&#26723;&#20160;&#20040;&#26102;&#38388;&#20462;&#25913;&#30340;&#65311;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1346637465375" MODIFIED="1346895810468">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      3
    </p>
    <p>
      [&#21407;&#25991;]P132
    </p>
    <p>
      Here's where the conversion&#8722;from&#8722;unicode&#8722;to&#8722;other&#8722;encoding&#8722;schemes comes in. s is a unicode string, but print can only print a regular string. To solve this problem, you call the encode method, available on every unicode string, to convert the unicode string to a regular string in the given encoding scheme, which you pass as parameter. In this case, you're using latin&#8722;1 (also known as iso&#8722;8859&#8722;1), which includes the tilde&#8722;n (whereas the default ASCII encoding scheme did not, since it only includes characters numbered 0 through 127).
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#36825;&#37324; &#36716;&#25442;unicode&#23383;&#31526;&#21040;&#20854;&#20182;&#30340;&#32534;&#30721;&#26684;&#24335; &#22312;s &#26159;unicode&#23383;&#31526;&#20018;&#65292;&#20294;&#26159;print&#21482;&#33021;&#25171;&#21360;&#24120;&#35268;{regular}&#23383;&#31526;&#12290;&#20026;&#20102;&#35299;&#20915;&#36825;&#20010;&#38382;&#39064;&#65292;&#20320;&#35843;&#29992;encode&#26041;&#27861;&#65292;&#21487;&#20197;&#20351;&#29992;&#22312;{available on}&#20219;&#20309;unicode&#23383;&#31526;&#19978;&#65292;&#36890;&#36807;&#20320;&#20256;&#20837;&#30340;&#21442;&#25968;&#65292;&#21487;&#20197;&#36716;&#25442;{convert}unicode &#23383;&#31526;&#20018;&#21040;&#20854;&#20182;&#32473;&#23450;&#32534;&#30721;&#33539;&#22260;&#30340;&#24120;&#35268;{regular}&#23383;&#31526;&#20018;&#12290;&#36825;&#20010;&#20363;&#23376;&#20013;&#65292;&#20320;&#20351;&#29992;latin-1(&#20063;&#23601;&#26159;ISO-8859-1),&#23427;&#21253;&#21547;&#27874;&#28010;&#22411;{tilde}-n(&#23613;&#31649;{whereas}&#40664;&#35748;&#30340;ASCII&#32534;&#30721;&#20013;&#27809;&#26377;&#65292;&#22240;&#20026;&#23427;&#20165;&#20165;&#21253;&#21547;0-127).
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1346895858015" ID="ID_935054205" MODIFIED="1346896162703">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P132
    </p>
    <p>
      Remember I said Python usually converted unicode to ASCII whenever it needed to make a regular string out of a unicode string? Well, this default encoding scheme is an option which you can customize.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#35760;&#24471;&#25105;&#35828;&#36807;Python &#24403;&#23427;&#38656;&#35201;&#36716;&#25442;&#24120;&#35268;&#30340;&#23383;&#31526;&#20018;&#21040;unicode&#32534;&#30721;&#26102;&#65292; &#20351;&#29992; &#36716;&#25442;unicode &#21040;ASCII &#65311; &#24456;&#22909;&#65292;&#36825;&#20010;&#40664;&#35748;&#30340;&#32534;&#30721;&#21306;&#22495;&#26159;&#20320;&#21487;&#20197;&#36873;&#25321;{option}&#33258;&#23450;&#20041;&#30340;{customize}
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1346896184968" FOLDED="true" ID="ID_728566940" MODIFIED="1347240876500">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Example 9.15. sitecustomize.py
    </p>
    <p>
      # sitecustomize.py
    </p>
    <p>
      # this file can be anywhere in your Python path,
    </p>
    <p>
      # but it usually goes in ${pythondir}/lib/site&#8722;packages/
    </p>
    <p>
      import sys
    </p>
    <p>
      sys.setdefaultencoding('iso&#8722;8859&#8722;1')&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2
    </p>
  </body>
</html></richcontent>
<node CREATED="1346896473640" MODIFIED="1347240702531">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P132
    </p>
    <p>
      sitecustomize.py is a special script; Python will try to import it on startup, so any code in it will be run automatically. As the comment mentions, it can go anywhere (as long&#160;as import can find it), but it usually goes in the site&#8722;packages directory within your Python lib directory
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      sitecustomize.py &#26159;&#19968;&#29305;&#27530;&#33050;&#26412;:Python&#21551;&#21160;&#26102;{on startup} &#23581;&#35797;&#23548;&#20837;&#65292;&#25152;&#20197;&#20854;&#20013;&#20195;&#30721;&#33258;&#21160;&#36816;&#34892;&#12290;&#22914;&#27880;&#37322;&#20013;&#25552;&#21450;&#65292;&#20854;&#21487;&#36816;&#34892;&#20110;&#20219;&#20309;&#20301;&#32622;&#65288;&#22914;import &#36807;&#23427;&#19968;&#33324;&#65289;&#65292;&#20294;&#20854;&#22312;&#20320;&#30340;Python lib &#25991;&#20214;&#22841;&#20013;&#30340;site-packages&#25991;&#20214;&#22841;&#20013;&#12290;
    </p>
    <p>
      [?]&#25105;&#26597;&#20102;&#19968;&#19979;&#33258;&#24049;&#29992;&#30340;python&#20013;&#23545;&#24212;&#20301;&#32622;&#27809;&#26377;&#27492;&#25991;&#20214;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1347240237265" MODIFIED="1347240506406">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2
    </p>
    <p>
      [&#21407;&#25991;] P132
    </p>
    <p>
      setdefaultencoding function sets, well, the default encoding. This is the encoding scheme that Python will try to use whenever it needs to auto&#8722;coerce a unicode string into a regular string.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      setdefaultencoding &#20989;&#25968;&#25968;&#20540;&#40664;&#35748;&#32534;&#30721;&#12290;&#27492;&#32534;&#30721;&#21306;&#22495;Python&#23581;&#35797;&#22312;&#24120;&#35268;{regular}&#23383;&#31526;&#20013;&#65292;&#20219;&#20309;&#38656;&#35201;&#30340;&#33258;&#21160;&#24378;&#21046;(coerce)&#21305;&#37197;&#30340;&#20301;&#32622;&#20351;&#29992;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1347240713125" FOLDED="true" ID="ID_67923964" MODIFIED="1347242182593">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      Example 9.16. Effects of setting the default encoding
    </p>
    <p>
      &gt;&gt;&gt; import sys
    </p>
    <p>
      &gt;&gt;&gt; sys.getdefaultencoding()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1
    </p>
    <p>
      'iso&#8722;8859&#8722;1'
    </p>
    <p>
      &gt;&gt;&gt; s = u'La Pe\xf1a'
    </p>
    <p>
      &gt;&gt;&gt; print s&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2
    </p>
    <p>
      La Pe&#241;a
    </p>
  </body>
</html></richcontent>
<node CREATED="1347240878218" MODIFIED="1347241833015">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1.
    </p>
    <p>
      [&#21407;&#25991;]P132
    </p>
    <p>
      This example assumes that you have made the changes listed in the previous example to your sitecustomize.py file, and restarted Python. If your default encoding still says 'ascii', you didn't set up your sitecustomize.py properly, or you didn't restart Python. The default encoding can only be changed during Python startup; you can't change it later. (Due to some wacky programming tricks that I won't get into right now, you can't even call sys.setdefaultencoding after Python has started up. Dig into site.py and search for &quot;setdefaultencoding&quot; to find out how.)
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#27492;&#20363;&#20551;&#35774;{assumes} &#20320; &#25913;&#21464;&#21069;{previous}&#20363;&#20013;sitecustomize.py,&#24182;&#37325;&#21551;python.&#22914;&#20320;&#40664;&#35748;&#32534;&#30721;&#20026;ascii,&#20320;&#26410;&#24314;{set up}&#33258;&#24049;&#36866;&#21512;&#30340;{properly}sizecustomize.py,&#25110;&#26410;&#37325;&#21551;Python.&#27492;&#40664;&#35748;&#23383;&#31526;&#38598;&#25913;&#21464;&#20043;&#33021;&#36890;&#36807;Python&#37325;&#21551;{startup},&#26080;&#27861;&#22312;&#20043;&#21518;&#25913;&#21464;&#12290;&#65288;&#30001;&#20110;&#19968;&#20123;&#24858;&#34850;{wacky}&#30340;&#31243;&#24207;&#35774;&#35745;{tricks}&#25105;&#29616;&#22312;&#20063;&#19981;&#23545;&#12304;[?]&#27492;&#21477;&#32763;&#35793;&#26377;&#38382;&#39064;&#21834;&#65281;&#12305;&#65292;python&#21551;&#21160;&#21518;&#20320;&#29978;&#33267;&#19981;&#33021;&#20351;&#29992;sys.setdefaultencoding. &#25506;&#31350;{dig into]site.py &#24182;&#25628;&#32034;&#8220;setdefaultencoding&#8221;&#25214;&#20986;&#22914;&#20309;&#22914;&#27492;&#12290;&#65289;
    </p>
    <p>
      
    </p>
    <p>
      [?]
    </p>
    <p>
      &#25105;&#26412;&#22320;&#30340;&#36816;&#34892;&#32467;&#26524;
    </p>
    <p>
      IDLE 2.6.5&#160;&#160;&#160;&#160;&#160;
    </p>
    <p>
      &gt;&gt;&gt; import sys
    </p>
    <p>
      &gt;&gt;&gt; sys.getdefaultencoding()
    </p>
    <p>
      'ascii'
    </p>
    <p>
      &gt;&gt;&gt; s=u'La Pe\xf1a'
    </p>
    <p>
      &gt;&gt;&gt; print s
    </p>
    <p>
      La Pe&#241;a
    </p>
    <p>
      
    </p>
    <p>
      &#25105;&#30340;&#40664;&#35748;&#23601;&#26159;ascii &#65292;&#25105;&#30830;&#23454;&#27809;&#24314;&#31435;&#33258;&#24049;&#30340;sizecustomize.py
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1347241855109" MODIFIED="1347242163406">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2.
    </p>
    <p>
      [&#21407;&#25991;]P132
    </p>
    <p>
      Now that the default encoding scheme includes all the characters you use in your string, Python has no problem auto&#8722;coercing the string and printing it.
    </p>
    <p>
      [pope&#35793;] &#29616;&#22312;&#40664;&#35748;&#23383;&#31526;&#38598;&#21253;&#21547;&#20320;&#23383;&#31526;&#20018;&#20013;&#25152;&#29992;&#30340;&#20840;&#37096;&#12290;Python &#33258;&#21160;-&#24378;&#21046;{coercing} &#27492;&#23383;&#31526;&#25171;&#21360;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1347242177828" ID="ID_868091735" MODIFIED="1347242191734" TEXT="Example 9.17. Specifying encoding in .py files">
<node CREATED="1347499261500" ID="ID_1981880763" MODIFIED="1347500933312">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P133
    </p>
    <p>
      If you are going to be storing non&#8722;ASCII strings within your Python code, you'll need to specify the encoding of each individual .py file by putting an encoding declaration at the top of each file. This declaration defines the .py file to be UTF&#8722;8:
    </p>
    <p>
      #!/usr/bin/env python
    </p>
    <p>
      # &#8722;*&#8722; coding: UTF&#8722;8 &#8722;*&#8722;
    </p>
    <p>
      Now, what about XML? Well, every XML document is in a specific encoding. Again, ISO&#8722;8859&#8722;1 is a popular encoding for data in Western European languages. KOI8&#8722;R is popular for Russian texts. The encoding, if specified, is in the header of the XML document.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#22914;&#26524;&#20320;&#25171;&#31639;&#23384;&#20648;&#38750;ASCII&#23383;&#31526;&#22312;&#20320;&#30340;Python&#20195;&#30721;&#20013;&#65292;&#20320;&#38656;&#35201;&#22312;&#27599;&#20010;&#21333;&#29420;&#30340;{individual}.py&#25991;&#20214;&#39030;&#37096;&#25918;&#32622;&#26126;&#30830;{specify}&#32534;&#30721;&#22768;&#26126;&#12290;&#27492;&#22768;&#26126;{declaration}&#23450;&#20041;.py&#25991;&#20214;&#20351;&#29992;UTF-8&#65306;
    </p>
    <p>
      #!/usr/bin/env python
    </p>
    <p>
      # &#8722;*&#8722; coding: UTF&#8722;8 &#8722;*&#8722;
    </p>
    <p>
      &#37027;&#19982;XML&#26377;&#20160;&#20040;&#20851;&#31995;&#65311;&#24456;&#22909;&#65292;&#27599;&#20010;XML&#25991;&#26723;&#37117;&#26377;&#26126;&#30830;&#30340;{specific}&#32534;&#30721;&#38598;&#12290;&#24182;&#19988;&#65292;ISO-8859-1&#26159;&#35199;&#27431;&#35821;&#35328;&#30340;&#27969;&#34892;&#32534;&#30721;&#12290;KO18-R &#26159;&#27969;&#34892;&#30340;&#20420;&#25991;&#32534;&#30721;&#12290;&#36825;&#31181;&#32534;&#30721;&#22914;&#26524;&#35201;&#26126;&#30830;&#65292;&#26159;&#22312;XML&#25991;&#26723;&#22836;&#37096;&#23436;&#25104;&#30340;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1347499256953" FOLDED="true" ID="ID_1248136835" MODIFIED="1348104926078" TEXT="Example 9.18. russiansample.xml">
<node CREATED="1347501019406" ID="ID_1602745561" MODIFIED="1347501039718">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &lt;?xml version=&quot;1.0&quot; encoding=&quot;koi8&#8722;r&quot;?&gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1
    </p>
    <p>
      &lt;preface&gt;
    </p>
    <p>
      &lt;title&gt;?@548A;&gt;285&lt;/title&gt;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;2
    </p>
    <p>
      &lt;/preface&gt;
    </p>
  </body>
</html></richcontent>
<node CREATED="1347501070390" ID="ID_993494736" MODIFIED="1347501662046">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P133
    </p>
    <p>
      This is a sample extract from a real Russian XML document; it's part of a Russian translation of&#160;this very book. Note the encoding, koi8&#8722;r, specified in the header.
    </p>
    <p>
      
    </p>
    <p>
      [pope &#35793;] &#36825;&#26159;&#19968;&#20010;&#20174;&#30495;&#23454;&#20420;&#25991;XML&#25991;&#26723;&#20013;&#33719;&#24471;&#30340;&#31616;&#21333;&#25688;&#24405;{extract}&#65307;&#36825;&#26159;&#27492;&#20070;&#20420;&#25991;&#32763;&#35793;&#30340;&#19968;&#37096;&#20998;&#12290;([?]this very book&#22914;&#20309;&#32763;&#35793;&#65311;very&#19981;&#26159;&#21103;&#35789;&#21527;&#65311; )&#22312;&#25991;&#20214;&#22836;&#26631;&#35782;koi8-r&#32534;&#30721;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1347501663015" ID="ID_997656701" MODIFIED="1348103607140">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2
    </p>
    <p>
      [&#21407;&#25991;]P133
    </p>
    <p>
      These are Cyrillic characters which, as far as I know, spell the Russian word for &quot;Preface&quot;. If you open this file in a regular text editor, the characters will most likely like gibberish, because they're encoded using the koi8&#8722;r encoding scheme, but they're being displayed in iso&#8722;8859&#8722;1.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#25454;&#25105;&#25152;&#30693;{as far as I know} ,&#36825;&#37324;&#26377;Cyrillic &#23383;&#31526; &#20026;&#22312;&quot;&#21069;&#35328;{perface}&quot;&#20889;&#20420;&#25991;&#12290;&#22914;&#26524;&#20320;&#20351;&#29992;&#27491;&#35268;{regular}&#30340;&#25991;&#26412;&#32534;&#36753;&#22120;&#25171;&#24320;&#27492;&#25991;&#20214;&#65292;&#27492;&#23383;&#31526;&#23558;&#30475;&#36215;&#26469;&#20687;&#20081;&#30721;{gibberish},&#22240;&#20026;&#20182;&#20204;&#20351;&#29992;&#20102;koi8-r &#32534;&#30721;&#22495;&#65292;&#20294;&#20182;&#20204;&#21487;&#20197;&#20351;&#29992;iso-8859-1&#23637;&#31034;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1347500951375" FOLDED="true" ID="ID_1542247837" MODIFIED="1349833056046" TEXT="Example 9.19. Parsing russiansample.xml">
<node CREATED="1348104943437" FOLDED="true" ID="ID_1030983017" MODIFIED="1349833047421">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &gt;&gt;&gt; from xml.dom import minidom
    </p>
    <p>
      &gt;&gt;&gt; xmldoc = minidom.parse('russiansample.xml')&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1
    </p>
    <p>
      &gt;&gt;&gt; title = xmldoc.getElementsByTagName('title')[0].firstChild.data
    </p>
    <p>
      &gt;&gt;&gt; title
    </p>
    <p>
      u'\u041f\u0440\u0435\u0434\u0438\u0441\u043b\u043e\u0432\u0438\u0435'
    </p>
    <p>
      &gt;&gt;&gt; print title
    </p>
    <p>
      Traceback (innermost last):
    </p>
    <p>
      &#160;&#160;File &quot;&lt;interactive input&gt;&quot;, line 1, in ?
    </p>
    <p>
      UnicodeError: ASCII encoding error: ordinal not in range(128)
    </p>
    <p>
      &gt;&gt;&gt; convertedtitle = title.encode('koi8&#8722;r')&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;4
    </p>
    <p>
      &gt;&gt;&gt; convertedtitle
    </p>
    <p>
      '\xf0\xd2\xc5\xc4\xc9\xd3\xcc\xcf\xd7\xc9\xc5'
    </p>
    <p>
      &gt;&gt;&gt; print convertedtitle
    </p>
    <p>
      ?@548A;&gt;285
    </p>
  </body>
</html></richcontent>
<node CREATED="1348105115031" ID="ID_1865631935" MODIFIED="1348105909500">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P133
    </p>
    <p>
      I'm assuming here that you saved the previous example as russiansample.xml in the current directory. I am also, for the sake of completeness, assuming that you've changed your default encoding back to 'ascii' by removing your sitecustomize.py file, or at least commenting out the setdefaultencoding line
    </p>
    <p>
      [pope&#35793;]&#25105;&#20551;&#23450;{assuming}&#20320;&#23384;&#20648;&#20043;&#21069;&#30340;&#20363;&#23376;&#20026;&#24403;&#21069;&#30446;&#24405;&#30340;russiansample.xml&#25991;&#20214;&#12290;&#24182;&#26356;&#20026;&#20551;&#23450;&#20320;&#24050;&#36890;&#36807;&#31227;&#21160;sitecustomize.py&#25991;&#20214;&#65292;&#20462;&#25913;&#40664;&#35748;&#32534;&#30721;&#20026;&#8216;ascii&#8217;&#65288;sake {&#29702;&#30001;} completeness {&#23436;&#32654;&#29702;&#30001;}&#65289;&#65292;&#25110;&#32773;&#22312;&#20043;&#21069;&#30340;&#21629;&#20196;&#20013;&#31227;&#20986;&#35774;&#32622;&#30340;&#40664;&#35748;&#32534;&#30721;&#34892;&#12290;
    </p>
    <p>
      [?]&#22312;&#24819;&#33258;&#24049;&#30340;&#27979;&#35797;&#27809;&#26377;&#20986;&#29616;&#20070;&#20013;&#30340;&#25928;&#26524;&#26159;&#21542;&#21644;&#36825;&#20010;&#26377;&#20851;&#65311;sitecustomize.py&#25991;&#20214;&#20043;&#21069;&#30475;&#36807;&#65292;&#33258;&#24049;&#26412;&#26426;&#26159;&#27809;&#26377;&#30340;&#12290;&#20294;&#36825;&#20010;out the setdafaultencoding line&#22909;&#20687;&#25105;&#36824;&#30495;&#27809;&#26377;&#20351;&#29992;&#30340;&#65292;how to?
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1348105950968" ID="ID_1645178603" MODIFIED="1349831382265">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2
    </p>
    <p>
      [&#21407;&#25991;]P133
    </p>
    <p>
      Note that the text data of the title tag (now in the title variable, thanks to that long concatenation of Python functions which I hastily&#160;skipped over and, annoyingly, won't explain until the next section) &#8722;&#8722; the text data inside the XML document's title element is stored in unicode.
    </p>
    <p>
      [pope&#35793;] &#35760;&#24405;&#36825;&#20010;title &#26631;&#31614;&#30340;&#25968;&#25454;(&#29616;&#22312;&#22312;title &#21464;&#37327;{variable}&#20013;&#65292;&#35201;&#24863;&#35874;Python&#30340;&#38271;(&#23383;&#31526;)&#36830;&#25509;{concatenation}&#20989;&#25968;&#65292;&#36825;&#37324;&#25105;&#23558;&#33609;&#33609;&#30340;{hastily}&#36339;&#36807;{skip over}&#24182;&#24573;&#30053;{annoyingly}&#36825;&#20010;&#30340;&#35299;&#37322;&#65292;&#19979;&#31456;&#20877;&#32454;&#35762; )--&#36825;&#20010;&#25991;&#26412;&#25968;&#20540;&#21253;&#21547;&#22312;XML&#25991;&#26723;&#30340;title&#32467;&#28857;&#20013;&#23384;&#20026;unicode
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1348106388093" ID="ID_962376524" MODIFIED="1349831710218">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      3
    </p>
    <p>
      [&#21407;&#25991;]P133
    </p>
    <p>
      Printing the title is not possible, because this unicode string contains non&#8722;ASCII characters, so Python can't convert it to ASCII because that doesn't&#160;make sense.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#25171;&#21360; &#36825;&#20010;title &#26159;&#19981;&#21487;&#20197;&#30340;&#65292;&#22240;&#20026;&#36825;&#20010;unciode&#23383;&#31526;&#20018;&#20013;&#21253;&#21547;&#38750;ASCII&#23383;&#31526;&#65292;&#25152;&#20197;Python &#19981;&#33021;&#36716;&#25442;{convert}&#23427;&#20026;ASCII &#22240;&#20026;&#36825;&#26679;&#27809;&#26377;&#24847;&#20041;{make sense}
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1349831930234" ID="ID_260478140" MODIFIED="1349832350125">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      4
    </p>
    <p>
      [&#21407;&#25991;]P133
    </p>
    <p>
      You can, however, explicitly convert it to koi8&#8722;r, in which case you get a (regular, not unicode) string of single&#8722;byte characters (f0, d2, c5, and so forth) that are the koi8&#8722;r&#8722;encoded versions of the characters in the original unicode string
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#28982;&#32780;&#20320;&#21487;&#20197;&#26126;&#30830;&#30340;{explicitly}&#36716;&#25442;{convert}&#23427;&#20026;koi8-r,&#30001;&#20110;&#20320;&#26377;&#65288;&#27880;&#20876;&#30340;&#65292;&#38750;unicode&#65289;&#19968;&#20010;&#31616;&#21333;&#23383;&#31526;(f0,d2,c5&#31561;&#31561;&#22312;&#21407;&#26469;&#30340;unicode&#32534;&#30721;&#23383;&#31526;&#20013;&#65292;)&#36825;&#20010;&#26159;koi8-r-&#32534;&#30721;&#30340;&#23383;&#31526;&#29256;&#26412;&#30340;&#23383;&#31526;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1349832410390" ID="ID_145082189" MODIFIED="1349833007750">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      5
    </p>
    <p>
      [&#21407;&#25991;]P134
    </p>
    <p>
      Printing the koi8&#8722;r&#8722;encoded string will probably show gibberish on your screen, because your Python IDE is interpreting those characters as iso&#8722;8859&#8722;1, not koi8&#8722;r. But at least they do print. (And, if you look carefully, it's the same gibberish that you saw when you opened the original XML document in a non&#8722;unicode&#8722;aware text editor. Python converted it from koi8&#8722;r into unicode when it parsed the XML document, and you've just converted it back.)
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#22312;&#20320;&#30340;&#23631;&#24149;&#19978;&#25171;&#21360;koi8&#32534;&#30721;&#21487;&#33021;&#26174;&#31034;&#20026;&#20081;&#30721;{gibberish},&#22240;&#20026;&#20320;&#30340;PythonIDE&#35299;&#37322;{interpreting}&#36825;&#20123;&#23383;&#31526;&#20026;iso-8859-1&#65292;&#32780;&#38750;koi8.&#20294;&#32456;&#24402;&#20182;&#20204;&#26159;&#25171;&#21360;&#20102;&#12290;&#65288;&#24182;&#19988;&#65292;&#22914;&#26524;&#20320;&#30041;&#24515;&#65292;&#36825;&#20010;&#21644;&#20320;&#20351;&#29992;&#25991;&#26412;&#32534;&#36753;&#22120;&#25171;&#24320;&#21407;&#22987;&#30340;{original}XML&#25991;&#26723;&#20013;&#30340;&#38750;unicode&#26174;&#31034;&#26159;&#30456;&#21516;&#30340;&#20081;&#30721;{gibberish}.&#24403;&#20998;&#26512;XML&#25991;&#26723;&#26102;&#65292;Python&#20174;koi8-r&#36716;&#25442;&#23427;&#21040;unicode&#65292;&#20320;&#21018;&#21018;&#21453;&#21521;&#36716;&#25442;{converted}&#22238;&#26469;&#12290;&#65289;
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1348105019250" ID="ID_1101759640" MODIFIED="1348105095953">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [popexizhi:&#19979;&#38754;&#26159;&#25105;&#30340;&#27979;&#35797;&#32467;&#26524;&#65292;why&#65311;&#26159;&#25105;&#30340;&#26412;&#26426;&#30340;&#32534;&#30721;&#38382;&#39064;&#21527;&#65311;]
    </p>
    <p>
      &gt;&gt;&gt; from xml.dom import minidom
    </p>
    <p>
      &gt;&gt;&gt; xmldoc=minidom.parse('c:\\Py')
    </p>
    <p>
      
    </p>
    <p>
      Traceback (most recent call last):
    </p>
    <p>
      &#160;&#160;File &quot;&lt;pyshell#1&gt;&quot;, line 1, in &lt;module&gt;
    </p>
    <p>
      &#160;&#160;&#160;&#160;xmldoc=minidom.parse('c:\\Py')
    </p>
    <p>
      &#160;&#160;File &quot;C:\Python26\lib\xml\dom\minidom.py&quot;, line 1918, in parse
    </p>
    <p>
      &#160;&#160;&#160;&#160;return expatbuilder.parse(file)
    </p>
    <p>
      &#160;&#160;File &quot;C:\Python26\lib\xml\dom\expatbuilder.py&quot;, line 922, in parse
    </p>
    <p>
      &#160;&#160;&#160;&#160;fp = open(file, 'rb')
    </p>
    <p>
      IOError: [Errno 2] No such file or directory: 'c:\\Py'
    </p>
    <p>
      &gt;&gt;&gt; xmldoc=minidom.parse('c:\\Python26\\cg\\russiansample.xml')
    </p>
    <p>
      &gt;&gt;&gt; title = xmldoc.getElementsByTagName('title')[0].firstChild.data
    </p>
    <p>
      &gt;&gt;&gt; title
    </p>
    <p>
      u' @548A;&gt;285'
    </p>
    <p>
      &gt;&gt;&gt; print title
    </p>
    <p>
      &#160;@548A;&gt;285
    </p>
    <p>
      &gt;&gt;&gt; convertedtitle = title.encode('koi8-r')
    </p>
    <p>
      &gt;&gt;&gt; convertedtitle
    </p>
    <p>
      ' @548A;&gt;285'
    </p>
    <p>
      &gt;&gt;&gt; print convertedtitle
    </p>
    <p>
      &#160;@548A;&gt;285
    </p>
  </body>
</html></richcontent>
</node>
</node>
<node CREATED="1349833059078" ID="ID_487704350" MODIFIED="1349834662750">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P134
    </p>
    <p>
      To sum up, unicode itself is a bit intimidating if you've never seen it before, but unicode data is really very easy to handle in Python. If your XML documents are all 7&#8722;bit ASCII (like the examples in this chapter), you will literally&#160;ever&#160;think about unicode. Python will convert the ASCII data in the XML documents into unicode while parsing, and auto&#8722;coerce it back to ASCII whenever necessary, and you'll never even notice. But if you need to deal with that in other languages, Python is ready.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#24635;&#32780;&#35328;&#20043;{to sum up}&#65292;unicode &#22914;&#26524;&#20320;&#20043;&#21069;&#20174;&#26410;&#21548;&#35828;&#23427;&#23601;&#22810;&#23569;&#26377;&#28857;&#20799;&#21487;&#24597;{intimidate}&#65292;&#20294;&#22312;Python&#20013;unicode &#25968;&#25454;&#30495;&#30340;&#38750;&#24120;&#31616;&#21333;&#12290;&#22914;&#26524;&#20320;&#30340;XML&#25991;&#26723;&#20840;&#37096;&#37117;&#26159;7&#20301;&#30340;ASCII&#65288;&#23601;&#20687;&#36825;&#31456;&#20013;&#30340;&#20363;&#23376;&#65289;&#65292;&#20320;&#23558;&#29031;&#23383;&#38754;&#24847;&#24605;&#30340;&#24320;&#22987;&#32771;&#34385;unicode&#12304;&#65311;&#36825;&#20010;literally ever think about &#36825;&#26679;&#32763;&#35793;&#23545;&#21527;&#65311;&#24863;&#35273;&#19981;&#36890;&#65288;&#32763;&#35793;&#25104;:&#20320;&#20174;&#26410;&#24819;&#36807;unicode &#23545;&#21527;&#65311;&#21542;&#23450;&#30340;&#32763;&#35793;&#22240;&#20026;ever&#65289;&#12305;&#20998;&#26512;&#35821;&#27861;&#26102;&#65292;Python&#23558;ASCII&#25968;&#25454;&#36716;&#25442;&#20026;unicode&#65292;&#24182;&#19988;&#22312;&#38656;&#35201;&#30340;&#20301;&#32622;&#33258;&#21160;&#24378;&#21046;&#32763;&#35793;&#22238;ASCII&#65292;&#20320;&#29978;&#33267;&#20174;&#26410;&#27880;&#24847;&#36807;&#12290;&#20294;&#22914;&#26524;&#20320;&#38656;&#35201;&#22788;&#29702;&#20854;&#20182;&#35821;&#35328;&#65292;Python&#26159;&#20934;&#22791;&#23436;&#25104;&#30340;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1349834674421" ID="ID_1996896246" MODIFIED="1350264513420">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;] P134
    </p>
    <p>
      Further reading
    </p>
    <p>
      Unicode.org (http://www.unicode.org/) is the home page of the unicode standard, including a brief technical introduction&#160;(http://www.unicode.org/standard/principles.html).
    </p>
    <p>
      &#8226; Unicode Tutorial (http://www.reportlab.com/i18n/python_unicode_tutorial.html) has some more examples of how to use Python's unicode functions, including how to force Python to coerce unicode into ASCII even when it doesn't really want to.
    </p>
    <p>
      &#8226; PEP 263 (http://www.python.org/peps/pep&#8722;0263.html) goes into more detail about how and when to define a character encoding in your .py files.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#25193;&#23637;&#38405;&#35835;
    </p>
    <p>
      Unicode.org (http://www.unicode.org/) &#26159;unicode &#26631;&#20934;&#30340;&#20027;&#39029;&#65292;&#21253;&#21547;&#25216;&#26415;&#25688;&#35201; (http://www.unicode.org/standard/principles.html)
    </p>
    <p>
      Unicode Tutorial (http://www.reportlab.com/i18n/python_unicode_tutorial.html) &#21253;&#21547;&#19968;&#20123;&#22914;&#20309;&#20351;&#29992;Python &#30340;unicode&#30340;&#20363;&#23376;&#65292;&#21253;&#21547;&#29978;&#33267;&#19981;&#26159;&#30495;&#27491;&#38656;&#35201;&#26102;&#65292;&#22914;&#20309;&#24378;&#21046;(coerce)&#36716;&#25442; unicode &#21040;ASCII&#160;
    </p>
    <p>
      PEP 263 (http://www.python.org/peps/pep&#8722;0263.html) &#25552;&#20379;&#26356;&#22810;&#30340;&#32454;&#33410;(detail) &#20851;&#20110;&#20309;&#26102;&#21644;&#22914;&#20309;&#22312;&#20320;&#30340;py&#25991;&#20214;&#20013;&#23450;&#20041;&#23383;&#31526;&#32534;&#30721;&#12290;
    </p>
    <p>
      [next] &#38405;&#35835;&#19968;&#19979;&#30456;&#20851;&#30340;&#20869;&#23481;&#21543;:)
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1350264545030" FOLDED="true" ID="ID_1567462180" MODIFIED="1351042159531" POSITION="right" TEXT="9.5. Searching for elements">
<node CREATED="1350264643733" ID="ID_835486893" MODIFIED="1350264985905">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P134
    </p>
    <p>
      Traversing XML documents by stepping through each node can be tedious. If you're looking for something in particular, buried deep within your XML document, there is a shortcut you can use to find it quickly:
    </p>
    <p>
      getElementsByTagName.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#27493;&#27493;&#26597;&#38405;(traversing )xml &#25991;&#26723;&#30340;&#27599;&#20010;&#33410;&#28857; &#24456;&#20047;&#21619;&#65288;be tedious&#65289;.&#22914;&#20320;&#23547;&#19968;&#20010;&#29305;&#27530;{particular},&#28145;&#34255;(buried deep) xml&#25991;&#26723;&#30340;&#20869;&#23481;&#65292;&#36825;&#37324;&#26377;&#19968;&#20010;&#25463;&#24452;(shortcut)&#20320;&#21487;&#29992;&#26469;&#24555;&#36895;&#23547;&#25214;: getElementsByTagName.
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1350265094358" ID="ID_45307228" MODIFIED="1350265533670">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P134
    </p>
    <p>
      For this section, you'll be using the binary.xml grammar file, which looks like this:
    </p>
    <p>
      Example 9.20. binary.xml
    </p>
    <p>
      &lt;?xml version=&quot;1.0&quot;?&gt;
    </p>
    <p>
      &lt;!DOCTYPE grammar PUBLIC &quot;&#8722;//diveintopython.org//DTD Kant Generator Pro v1.0//EN&quot; &quot;kgp.dtd&quot;&gt;
    </p>
    <p>
      &lt;grammar&gt;
    </p>
    <p>
      &lt;ref id=&quot;bit&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;1&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &lt;ref id=&quot;byte&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;\
    </p>
    <p>
      &lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &lt;/grammar&gt;
    </p>
    <p>
      It has two refs, 'bit' and 'byte'. A bit is either a '0' or '1', and a byte is 8 bits.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#27492;&#31456;&#65292;&#20320;&#20351;&#29992;binary.xml&#35821;&#27861;&#25991;&#20214;&#65292;&#22914;&#19979;:
    </p>
    <p>
      ...
    </p>
    <p>
      &#23427;&#26377;&#20004;&#20010;refs&#65292;bit &#21644; byte&#12290;bit &#26159;0&#25110;1&#65292;byte &#26159;8bits&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1350265562436" FOLDED="true" ID="ID_282350688" MODIFIED="1350266217701" TEXT="Example 9.21. Introducing getElementsByTagName">
<node CREATED="1350265889514" ID="ID_1053979148" MODIFIED="1350265957686">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;] P134
    </p>
    <p>
      &gt;&gt;&gt; from xml.dom import minidom
    </p>
    <p>
      &gt;&gt;&gt; xmldoc = minidom.parse('binary.xml')
    </p>
    <p>
      &gt;&gt;&gt; reflist = xmldoc.getElementsByTagName('ref')&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;1
    </p>
    <p>
      &gt;&gt;&gt; reflist
    </p>
    <p>
      [&lt;DOM Element: ref at 136138108&gt;, &lt;DOM Element: ref at 136144292&gt;]
    </p>
    <p>
      &gt;&gt;&gt; print reflist[0].toxml()
    </p>
    <p>
      &lt;ref id=&quot;bit&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;1&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &gt;&gt;&gt; print reflist[1].toxml()
    </p>
    <p>
      &lt;ref id=&quot;byte&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;\
    </p>
    <p>
      &lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
  </body>
</html></richcontent>
<node CREATED="1350265967170" ID="ID_1944906482" MODIFIED="1350266205873">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P135
    </p>
    <p>
      getElementsByTagName takes one argument, the name of the element you wish to find. It returns a list of Element objects, corresponding to the XML elements that have that name. In this case, you find two ref elements.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      getElementsByTagName &#36820;&#22238;&#20320;&#35201;&#26597;&#25214;&#30340;&#20803;&#32032;&#32473;&#21464;&#37327;(argument)&#12290;&#23427;&#36820;&#22238;xml&#20013;&#27492;&#21517;&#31216;&#20803;&#32032;&#30340;&#23545;&#35937;&#21015;&#34920;.&#22312;&#36825;&#20010;&#20363;&#23376;&#20013;&#65292;&#20320;&#25214;&#21040;&#20004;&#20010;ref &#20803;&#32032;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1350266218592" FOLDED="true" ID="ID_1180820971" MODIFIED="1350611599140" TEXT="Example 9.22. Every element is searchable">
<node CREATED="1350266373545" ID="ID_1492516978" MODIFIED="1350266459655">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &gt;&gt;&gt; firstref = reflist[0]&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ----------------------------------------------------------------1
    </p>
    <p>
      &gt;&gt;&gt; print firstref.toxml()
    </p>
    <p>
      &lt;ref id=&quot;bit&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;1&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &gt;&gt;&gt; plist = firstref.getElementsByTagName(&quot;p&quot;)--------------------------------------------------2
    </p>
    <p>
      &gt;&gt;&gt; plist
    </p>
    <p>
      [&lt;DOM Element: p at 136140116&gt;, &lt;DOM Element: p at 136142172&gt;]
    </p>
    <p>
      &gt;&gt;&gt; print plist[0].toxml()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; ----------------------------------------------------------------3
    </p>
    <p>
      &lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &gt;&gt;&gt; print plist[1].toxml()
    </p>
    <p>
      &lt;p&gt;1&lt;/p&gt;
    </p>
  </body>
</html></richcontent>
<node CREATED="1350266469530" ID="ID_1060961015" MODIFIED="1350610035734">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1.
    </p>
    <p>
      [&#21407;&#25991;]P135
    </p>
    <p>
      Continuing from the previous example, the first object in your reflist is the 'bit' ref element.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#32487;&#32493;&#20043;&#21069;&#30340;&#20363;&#23376;&#65292;&#31532;&#19968;&#23545;&#35937;&#26159;&#20320;&#30340;reflist &#20013;&#30340; bit &#20540;&#30340;ref&#20803;&#32032;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1350609953484" ID="ID_1093904826" MODIFIED="1350610181828">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2.
    </p>
    <p>
      [&#21407;&#25991;]P135
    </p>
    <p>
      You can use the same getElementsByTagName method on this Element to find all the &lt;p&gt; elements within the 'bit' ref element.
    </p>
    <p>
      [pope&#35793;]&#22312;&#36825;&#20010;&#20803;&#32032;&#20013;&#20320;&#21487;&#20197;&#20351;&#29992;&#30456;&#21516;&#30340;getElementsByTagName &#26041;&#27861;&#22312;&#8216;bit&#8217;ref&#20803;&#32032;&#20013;&#26597;&#25214;&lt;p&gt;&#20803;&#32032;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1350610222140" ID="ID_245173883" MODIFIED="1350610355343">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      3.
    </p>
    <p>
      [&#21407;&#25991;]P135
    </p>
    <p>
      Just as before, the getElementsByTagName method returns a list of all the elements it found. In this case, you have two, one for each bit.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#21018;&#21018;&#65292;getElementsByTagName &#26041;&#27861;&#36820;&#22238;&#26597;&#25214;&#21040;&#30340;&#19968;&#20010;&#20840;&#37096;&#20803;&#32032;&#30340;list &#12290;&#36825;&#37324;&#20363;&#23376;&#20013;&#20320;&#26377;&#20004;&#20010;&#20803;&#32032;&#65292;&#27599;&#20010;&#37117;&#26159;&#19968;&#20010;&#23383;&#33410;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1350610397671" FOLDED="true" ID="ID_328920976" MODIFIED="1351042152609" TEXT="Example 9.23. Searching is actually recursive">
<node CREATED="1350610412890" ID="ID_936500416" MODIFIED="1350610465843">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &gt;&gt;&gt; plist = xmldoc.getElementsByTagName(&quot;p&quot;)----------------------------------------------------------------------------------1
    </p>
    <p>
      &gt;&gt;&gt; plist
    </p>
    <p>
      [&lt;DOM Element: p at 136140116&gt;, &lt;DOM Element: p at 136142172&gt;, &lt;DOM Element: p at 136146124&gt;]
    </p>
    <p>
      &gt;&gt;&gt; plist[0].toxml()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160; ----------------------------------------------------------------------------------2
    </p>
    <p>
      '&lt;p&gt;0&lt;/p&gt;'
    </p>
    <p>
      &gt;&gt;&gt; plist[1].toxml()
    </p>
    <p>
      '&lt;p&gt;1&lt;/p&gt;'
    </p>
    <p>
      &gt;&gt;&gt; plist[2].toxml()&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160;&#160; &#160;&#160;&#160;&#160;&#160; ----------------------------------------------------------------------------------3
    </p>
    <p>
      '&lt;p&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;\
    </p>
    <p>
      &lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;xref id=&quot;bit&quot;/&gt;&lt;/p&gt;'
    </p>
  </body>
</html></richcontent>
<node CREATED="1350611628781" ID="ID_44247906" MODIFIED="1350611952796">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1.
    </p>
    <p>
      [&#21407;&#25991;]P135
    </p>
    <p>
      Note carefully the difference&#160;&#160;between this and the previous example. Previously, you were searching for p elements within firstref, but here you are searching for p elements within xmldoc, the root&#8722;level object that represents the entire XML document. This does find the p elements nested within the ref elements within the root grammar element.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#27880;&#24847;&#36825;&#19982;&#20043;&#21069;&#20363;&#23376;&#30340;&#19981;&#21516;&#65292;&#20043;&#21069;&#65292;&#20320;&#22312;firstref&#20013;&#25628;&#32034;p&#65292;&#20294;&#36825;&#37324;&#20320;&#22312;xmldoc&#20013;&#25628;&#32034;&#65292;&#36825;&#20010;&#20195;&#34920;xml&#25991;&#26723;&#30340;&#26681;&#33410;&#28857;&#12290;&#36825;&#20010;&#26597;&#35810;&#23884;&#20837;(nested within) &#22312;&#26681;&#35821;&#27861;&#33410;&#28857;ref&#20013;&#30340;p&#20803;&#32032;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1350611682500" ID="ID_465510617" MODIFIED="1351041760984">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2.
    </p>
    <p>
      [&#21407;&#25991;]P135
    </p>
    <p>
      The first two p elements are within the first ref (the 'bit' ref).
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#36825;&#20010;&#20004;&#20010;p&#20803;&#32032;&#20013;&#31532;&#19968;&#20010;ref &#65288;&#36825;&#20010;&#8216;bit&#8217;&#30340;ref &#65289;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1351041762125" ID="ID_1574012829" MODIFIED="1351041905718">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      3
    </p>
    <p>
      [&#21407;&#25991;]P135
    </p>
    <p>
      The last p element is the one within the second ref (the 'byte' ref).
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#26368;&#21518;&#19968;&#20010;p&#20803;&#32032;&#26159;&#36825;&#20010;ref&#20013;&#30340;&#31532;&#20108;&#20010;(&#36825;&#20010;'byte'ref)
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
</node>
<node CREATED="1351042127781" FOLDED="true" ID="ID_287165514" MODIFIED="1352426572406" POSITION="right" TEXT="9.6. Accessing element attributes">
<node CREATED="1351042212640" ID="ID_289799315" MODIFIED="1351042480437">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;] P136
    </p>
    <p>
      XML elements can have one or more attributes, and it is incredibly simple to access them once you have parsed an XML document.
    </p>
    <p>
      For this section, you'll be using the binary.xml grammar file that you saw in the previous section.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      XML &#20803;&#32032;&#21487;&#20197;&#26377;&#19968;&#20010;&#25110;&#24456;&#22810;&#30340;&#23646;&#24615;&#65292;&#19968;&#26086;&#20320;&#20998;&#26512;&#36807;&#19968;&#20010;xml&#25991;&#26723;&#30340;&#35821;&#27861;&#65292;&#23601;&#21457;&#29616;&#20182;&#20204;&#29992;&#38590;&#20197;&#32622;&#20449;{incredibly}&#30340;&#31616;&#21333;&#26041;&#24335;&#23384;&#20648;&#12290;
    </p>
    <p>
      &#36825;&#31456;&#20013;&#65292;&#20320;&#23558;&#20351;&#29992; &#21069;&#19968;&#31456;&#20013; &#20320;&#30475;&#21040;&#30340; binary.xml &#35821;&#27861;&#25991;&#20214;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1351042602406" ID="ID_556015114" MODIFIED="1351043492296">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P136
    </p>
    <p>
      This section may be a little confusing, because of some overlapping terminology. Elements in an XML document have attributes, and Python objects also have attributes. When you parse an XML document, you get a bunch of Python objects that represent all the pieces of the XML document, and some of these Python objects represent attributes of the XML elements. But the (Python) objects that represent the (XML) attributes also have (Python) attributes, which are used to access various parts of the (XML) attribute that the object represents. I told you it was confusing. I am open to suggestions on how to distinguish these more clearly.
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;] &#26412;&#31456;&#23558;&#26377;&#28857;&#20799;&#22256;&#24785;{confusing},&#22240;&#20026;&#28041;&#21450;&#19968;&#20123;&#30456;&#20114;&#37325;&#21472;{overlapping}&#30340;&#25216;&#26415;. xml&#25991;&#26723;&#20013;&#26377;&#23646;&#24615;&#65292;&#24182;&#19988;python&#23545;&#35937;&#20063;&#26377;&#23646;&#24615;&#12290;&#24403;&#23545;xml&#25991;&#26723;&#36827;&#34892;&#35821;&#27861;&#20998;&#26512;&#26102;&#65292;&#20320;&#26377;&#19968;&#20010;python &#30340;&#26525;&#24178;&#32467;&#26500;&#26469;&#25551;&#36848;{represent}&#20840;&#37096;xml&#25991;&#26723;&#20013;&#30340;&#32467;&#26500;&#65292;&#24182;&#19988;&#36824;&#26377;&#19968;&#20123;python&#23545;&#35937;&#26469;&#25551;&#36848;{represents} xml&#20803;&#32032;&#30340;&#23646;&#24615;&#12290;&#20294;python&#23545;&#35937;&#25551;&#36848;{represent} xml&#30340;&#23646;&#24615;&#20063;&#26159;&#20351;&#29992;python&#30340;&#23646;&#24615;&#65292;&#36825;&#20123;&#23545;&#35937;&#25551;&#36848;{represents}&#23427;&#29992;&#26469;&#23384;&#20648;xml&#23646;&#24615;&#30340;&#19981;&#21516;{various}&#37096;&#20998;. &#25105;&#21578;&#35785;&#36807;&#20320;&#36825;&#26377;&#20123;&#22256;&#24785;{confusing}.&#25105;&#23558;&#24314;&#35758;{suggestions}&#22914;&#20309;&#28165;&#26224;&#30340;&#21306;&#20998;{distinguish}&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1351043506234" ID="ID_274479582" MODIFIED="1351043507125" TEXT="Example 9.24. Accessing element attributes">
<node CREATED="1351043519000" ID="ID_472394096" MODIFIED="1351043572171">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &gt;&gt;&gt; xmldoc = minidom.parse('binary.xml')
    </p>
    <p>
      &gt;&gt;&gt; reflist = xmldoc.getElementsByTagName('ref')
    </p>
    <p>
      &gt;&gt;&gt; bitref = reflist[0]
    </p>
    <p>
      &gt;&gt;&gt; print bitref.toxml()
    </p>
    <p>
      &lt;ref id=&quot;bit&quot;&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;0&lt;/p&gt;
    </p>
    <p>
      &#160;&#160;&lt;p&gt;1&lt;/p&gt;
    </p>
    <p>
      &lt;/ref&gt;
    </p>
    <p>
      &gt;&gt;&gt; bitref.attributes&#160;&#160;&#160; -----------------------------------------------------------------1
    </p>
    <p>
      &lt;xml.dom.minidom.NamedNodeMap instance at 0x81e0c9c&gt;
    </p>
    <p>
      &gt;&gt;&gt; bitref.attributes.keys() -----------------------------------------------------------------2&#65292;3
    </p>
    <p>
      [u'id']
    </p>
    <p>
      &gt;&gt;&gt; bitref.attributes.values() -----------------------------------------------------------------4
    </p>
    <p>
      [&lt;xml.dom.minidom.Attr instance at 0x81d5044&gt;]
    </p>
    <p>
      &gt;&gt;&gt; bitref.attributes[&quot;id&quot;]-----------------------------------------------------------------5
    </p>
    <p>
      &lt;xml.dom.minidom.Attr instance at 0x81d5044&gt;
    </p>
  </body>
</html></richcontent>
<node CREATED="1351043591031" ID="ID_738265303" MODIFIED="1351215498765">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;]P136
    </p>
    <p>
      Each Element object has an attribute called attributes, which is a NamedNodeMap object. This sounds scary, but it's not, because a NamedNodeMap is an object that acts like a dictionary, so you already know how to use it.
    </p>
    <p>
      [pope&#35793;]&#27599;&#20010;&#20803;&#32032;&#23545;&#35937;&#37117;&#26377;&#23646;&#24615;&#21483;&#20570;attributes,&#37027;&#26159;&#19968;&#20010;NamedNodeMap&#23545;&#35937;&#12290;&#36825;&#21548;&#36215;&#26469;&#26377;&#28857;&#20799;&#24656;&#24598;{scary},&#20294;&#20107;&#23454;&#24182;&#38750;&#22914;&#27492;&#65292;&#22240;&#20026;NamedNodeMap&#26159;&#19968;&#20010;&#31867;&#20284;&#20110;&#23383;&#20856;&#30340;&#23545;&#35937;&#65292;&#25152;&#20197;&#20320;&#24212;&#35813;&#30693;&#36947;&#22914;&#20309;&#20351;&#29992;&#23427;&#20102;&#21543;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1351215569921" ID="ID_1693034578" MODIFIED="1351215751250">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2
    </p>
    <p>
      [&#21407;&#25991;]P136
    </p>
    <p>
      Treating the NamedNodeMap as a dictionary, you can get a list of the names of the attributes of this element by using attributes.keys(). This element has only one attribute, 'id'.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#20687;&#23383;&#20856;&#19968;&#26679;&#22788;&#29702;{treating}&#36825;&#20010;NamedNodeMap,&#20320;&#21487;&#20197;&#36890;&#36807;&#20351;&#29992;attributes.keys()&#24471;&#21040;&#19968;&#20010;&#20803;&#32032;&#23646;&#24615;&#30340;&#21517;&#31216;&#21015;&#34920;&#12290;&#36825;&#20010;&#20803;&#32032;&#21482;&#26377;&#19968;&#20010;&#23646;&#24615;&#8216;id&#8217;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1351215780734" ID="ID_1810317739" MODIFIED="1351215875796">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      3
    </p>
    <p>
      [&#21407;&#25991;]P136
    </p>
    <p>
      Attribute names, like all other text in an XML document, are stored in unicode.
    </p>
    <p>
      [pope&#35793;] &#23646;&#24615;&#21517;&#31216;&#65292;&#24819;&#20854;&#20182;xml&#25991;&#26723;&#25991;&#26412;&#19968;&#26679;&#65292;&#23384;&#20648;&#20026;unicode&#32534;&#30721;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1351216155937" ID="ID_1455755509" MODIFIED="1351216357640">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      4
    </p>
    <p>
      [&#21407;&#25991;]P136
    </p>
    <p>
      Again treating the NamedNodeMap as a dictionary, you can get a list of the values of the attributes by using attributes.values(). The values are themselves objects, of type Attr. You'll see how to get useful information out of this object in the next example.
    </p>
    <p>
      [pope&#35793;] &#20877;&#27425;&#20687;&#23383;&#20856;&#20284;&#30340;&#22788;&#29702;{treating}NameNodeMap,&#20320;&#21487;&#20197;&#20351;&#29992;attributes.values()&#33719;&#24471;&#23646;&#24615;&#20540;&#21015;&#34920;&#12290;&#36825;&#20010;&#20540;&#26159;Attr&#31867;&#22411;&#30340;&#23545;&#35937;&#12290;&#20320;&#23558;&#22312;&#19979;&#31456;&#23398;&#20064;&#22914;&#20309;&#20102;&#35299;&#36825;&#20123;&#26377;&#29992;&#30340;&#36755;&#20986;&#20449;&#24687;&#12290;
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1351216445796" ID="ID_351578792" MODIFIED="1351217080062">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      5
    </p>
    <p>
      [&#21407;&#25991;]P136
    </p>
    <p>
      Still treating the NamedNodeMap as a dictionary, you can access an individual attribute by name, using normal dictionary syntax. (Readers who have been paying extra&#8722;close attention will already know how the NamedNodeMap class accomplishes this neat trick: by defining a __getitem__ special method. Other readers can take comfort in the fact that they don't need to understand how it works in order to use it effectively.)
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#20173;&#28982;&#26159;&#20687;&#23383;&#20856;&#19968;&#26679;&#22788;&#29702;{treating}NamedNodeMap,&#20320;&#21487;&#20197;&#20351;&#29992;&#21517;&#31216;&#23384;&#20648;&#29420;&#31435;&#30340;{individual}&#23646;&#24615;,&#20351;&#29992;&#24179;&#26102;&#30340;&#23383;&#20856;&#30340;&#35821;&#27861;&#26684;&#24335;&#12290;&#65288;&#20351;&#29992;&#39069;&#22806;&#20851;&#38381;{extra-close}&#23646;&#24615;&#30340;&#35835;&#32773;&#65292;&#36890;&#36807;&#23450;&#20041; __getitem__ &#30340;&#29305;&#27530;&#26041;&#27861;&#65292;&#23558;&#30693;&#36947;NamedNodeMap &#31867;&#30340;&#21333;&#32431;&#27450;&#39575;{neat trick}&#30340;&#23454;&#29616;&#26041;&#24335;{accomplisheds}&#12290;&#20854;&#20182;&#35835;&#32773;&#20204;&#23558;&#24471;&#21040;&#23433;&#24944;{comfort},&#20107;&#23454;&#19978;&#20182;&#20204;&#19981;&#38656;&#35201;&#30693;&#36947;&#22914;&#20309;&#26377;&#25928;&#30340;&#20351;&#20854;&#24037;&#20316;&#65289;[?]&#36825;&#20010;exira-close &#30340;&#32763;&#35793;&#26159;&#20160;&#20040;&#21602;&#65311;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1351217097703" ID="ID_1386074798" MODIFIED="1351217098515" TEXT="Example 9.25. Accessing individual attributes">
<node CREATED="1351217124218" ID="ID_1111841135" MODIFIED="1351217148843">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      &gt;&gt;&gt; a = bitref.attributes[&quot;id&quot;]
    </p>
    <p>
      &gt;&gt;&gt; a
    </p>
    <p>
      &lt;xml.dom.minidom.Attr instance at 0x81d5044&gt;
    </p>
    <p>
      &gt;&gt;&gt; a.name ----------------------------------------------------1
    </p>
    <p>
      u'id'
    </p>
    <p>
      &gt;&gt;&gt; a.value ----------------------------------------------------2
    </p>
    <p>
      u'bit'
    </p>
  </body>
</html></richcontent>
<node CREATED="1351217154875" ID="ID_1841346923" MODIFIED="1352253695984">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      1
    </p>
    <p>
      [&#21407;&#25991;] P137
    </p>
    <p>
      The Attr object completely represents a single XML attribute of a single XML element. The name of the attribute (the same name as you used to find this object in the bitref.attributes NamedNodeMap pseudo&#8722;dictionary) is stored in a.name.
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#36825;&#20010;Attr &#23545;&#35937;&#23436;&#20840;&#20195;&#34920;{represents} &#19968;&#20010;&#31616;&#21333;xml&#20803;&#32032;&#30340;xml&#23646;&#24615;&#12290;&#36825;&#20010;&#23646;&#24615;&#30340;&#21517;&#31216;&#23384;&#20648;&#22312;a.name&#20013;( &#36825;&#20010;&#30456;&#21516;&#21517;&#23383;&#20320;&#29992;&#26469;&#22312;&#36825;&#20010; bitref.attributes NamedNodeMap &#31867;&#20284;{pseudo} &#23383;&#20856; &#20013; &#26597;&#25214;&#36825;&#20010;&#23545;&#35937; )
    </p>
  </body>
</html></richcontent>
</node>
<node CREATED="1352253774171" ID="ID_413973279" MODIFIED="1352253897671">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      2
    </p>
    <p>
      [&#21407;&#25991;] P137
    </p>
    <p>
      The actual text value of this XML attribute is stored in a.value
    </p>
    <p>
      [pope&#35793;] xml &#23646;&#24615;&#30340;&#30495;&#27491;{actual}&#25991;&#26412;&#20540; &#23384;&#20648;&#22312; a.value&#20013;
    </p>
  </body>
</html></richcontent>
</node>
</node>
</node>
<node CREATED="1352253960515" ID="ID_1231193636" MODIFIED="1352425733265">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P137
    </p>
    <p>
      Like a dictionary, attributes of an XML element have no ordering. Attributes may happen to be listed in a certain order in the original XML document, and the Attr objects may happen to be listed in a certain order when the XML document is parsed into Python objects, but these orders are arbitrary and should carry no special meaning. You should always access individual attributes by name, like the keys of a dictionary.
    </p>
    <p>
      [pope&#35793;] &#20687;&#23383;&#20856;&#31867;&#22411;&#19968;&#26679;&#65292;xml&#20803;&#32032;&#30340;&#23646;&#24615;&#26080;&#24207;&#12290;&#23646;&#24615;&#21487;&#33021; &#20598;&#23572;&#20197;&#21407;xml&#25991;&#26723;&#20013;&#30340;&#39034;&#24207;&#21015;&#20986;&#65292;&#24182;&#19988; &#24403;xml&#25991;&#26723;&#34987;Python&#23545;&#35937;&#36827;&#34892;&#35821;&#27861;&#20998;&#26512;&#26102;&#65292;attr&#23545;&#35937;&#21487;&#33021;&#34987;&#21015;&#20026;&#24403;&#21069;&#39034;&#24207;&#12290;&#20294;&#26159;&#27492;&#39034;&#24207;&#26159;&#38543;&#24847;&#30340;&#27809;&#20160;&#20040;&#29305;&#27530;&#21547;&#20041;&#12290;&#20320;&#20063;&#21487;&#20197;&#20687;&#20351;&#29992;&#23383;&#20856;&#30340;&#20027;&#38190;&#19968;&#26679;&#65292;&#36890;&#36807;&#21517;&#23383;&#23384;&#20648;&#29420;&#31435;&#30340;&#23646;&#24615;&#12290;
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1352425940171" ID="ID_12374670" MODIFIED="1352426570562" POSITION="right" TEXT="9.7. Segue">
<node CREATED="1352425941671" ID="ID_238145180" MODIFIED="1352426543906">
<richcontent TYPE="NODE"><html>
  <head>
    
  </head>
  <body>
    <p>
      [&#21407;&#25991;]P137
    </p>
    <p>
      OK, that's it for the hard&#8722;core XML stuff. The next chapter will continue to use these same example programs, but focus on other aspects that make the program more flexible: using streams for input processing, using getattr for method dispatching, and using command&#8722;line flags to allow users to reconfigure the program without changing the code.
    </p>
    <p>
      
    </p>
    <p>
      &#160;
    </p>
    <p>
      Before moving on to the next chapter, you should be comfortable doing all of these things:
    </p>
    <p>
      
    </p>
    <p>
      &#8226; Parsing XML documents using minidom, searching through the parsed document, and accessing arbitrary element attributes and element children
    </p>
    <p>
      &#8226;Organizing complex libraries into packages
    </p>
    <p>
      &#8226;Converting unicode strings to different character encodings
    </p>
    <p>
      
    </p>
    <p>
      [pope&#35793;]
    </p>
    <p>
      &#22909;&#20102;&#65292;&#37027;&#20123;&#23601;&#26159;XML &#30340;&#22806;&#22771;&#12290;&#19979;&#31456;&#32487;&#32493;&#20351;&#29992;&#30456;&#21516;&#30340;&#20363;&#23376;&#65292;&#20294;&#20851;&#27880;{focus}&#21478;&#22806;&#30340;&#26041;&#21521;(aspects)&#65292;&#21363;&#22686;&#21152;&#31243;&#24207;&#30340;&#28789;&#27963;&#24615;(flexible)&#65306;&#20351;&#29992;&#36755;&#20837;&#27969;&#36827;&#31243;&#65292;&#20351;&#29992;geattr &#26041;&#27861; &#27966;&#36963;(dispatching),&#20351;&#29992;&#21629;&#20196;&#34892;&#26631;&#24535; &#21040;&#36798; &#20801;&#35768;&#29992;&#25143;&#22312;&#27809;&#26377;&#25913;&#21464;&#20195;&#30721;&#30340;&#24773;&#20917;&#19979;&#37325;&#32452;&#31243;&#24207;&#12290;
    </p>
  </body>
</html>
</richcontent>
</node>
</node>
<node CREATED="1347499329765" ID="ID_450446489" MODIFIED="1347499333109" POSITION="right" TEXT="next"/>
</node>
</map>
